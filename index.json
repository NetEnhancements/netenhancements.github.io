{
  "api/index.html": {
    "href": "api/index.html",
    "title": ".NET Enhancements API Documentation",
    "keywords": ".NET Enhancements API Documentation These docs are generated from the XML comments on our classes and methods. Use the namespace list in the menu to navigate to a namespace, type or method."
  },
  "api/NetEnhancements.AspNet.Conventions.AreaAuthorizationPolicyConvention.html": {
    "href": "api/NetEnhancements.AspNet.Conventions.AreaAuthorizationPolicyConvention.html",
    "title": "Class AreaAuthorizationPolicyConvention",
    "keywords": "Class AreaAuthorizationPolicyConvention Namespace NetEnhancements.AspNet.Conventions Assembly NetEnhancements.AspNet.dll Applies the provided policies to MVC Controllers and Razor Pages. public class AreaAuthorizationPolicyConvention : IControllerModelConvention, IPageApplicationModelConvention, IPageConvention Inheritance object AreaAuthorizationPolicyConvention Implements IControllerModelConvention IPageApplicationModelConvention IPageConvention Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors AreaAuthorizationPolicyConvention(List<AreaPolicy>) public AreaAuthorizationPolicyConvention(List<AreaPolicy> policies) Parameters policies List<AreaPolicy> Methods Apply(ControllerModel) public void Apply(ControllerModel controller) Parameters controller ControllerModel Apply(PageApplicationModel) public void Apply(PageApplicationModel model) Parameters model PageApplicationModel"
  },
  "api/NetEnhancements.AspNet.Conventions.AreaControllerRoutingConvention.html": {
    "href": "api/NetEnhancements.AspNet.Conventions.AreaControllerRoutingConvention.html",
    "title": "Class AreaControllerRoutingConvention",
    "keywords": "Class AreaControllerRoutingConvention Namespace NetEnhancements.AspNet.Conventions Assembly NetEnhancements.AspNet.dll Apply this convention to route all controllers based on their \"Areas.\" namespace, if any. This prevents having to put [Area(\"Foo\")] on every controller. public class AreaControllerRoutingConvention : IApplicationModelConvention Inheritance object AreaControllerRoutingConvention Implements IApplicationModelConvention Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Methods Apply(ApplicationModel) public void Apply(ApplicationModel application) Parameters application ApplicationModel"
  },
  "api/NetEnhancements.AspNet.Conventions.AreaPolicy.html": {
    "href": "api/NetEnhancements.AspNet.Conventions.AreaPolicy.html",
    "title": "Class AreaPolicy",
    "keywords": "Class AreaPolicy Namespace NetEnhancements.AspNet.Conventions Assembly NetEnhancements.AspNet.dll public record AreaPolicy : IEquatable<AreaPolicy> Inheritance object AreaPolicy Implements IEquatable<AreaPolicy> Derived DefaultAreaPolicy Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors AreaPolicy(string?, params IFilterMetadata[]) public AreaPolicy(string? AreaName, params IFilterMetadata[] Filters) Parameters AreaName string Filters IFilterMetadata[] Properties AreaName public string? AreaName { get; init; } Property Value string Filters public IFilterMetadata[] Filters { get; init; } Property Value IFilterMetadata[]"
  },
  "api/NetEnhancements.AspNet.Conventions.AreaRoutingAttribute.html": {
    "href": "api/NetEnhancements.AspNet.Conventions.AreaRoutingAttribute.html",
    "title": "Class AreaRoutingAttribute",
    "keywords": "Class AreaRoutingAttribute Namespace NetEnhancements.AspNet.Conventions Assembly NetEnhancements.AspNet.dll Apply to a controller to auto-route its area based on its namespace. So instead of [Area(\"Foo\")], use [AreaRouting] on a controller in the MyProject.Areas.Foo.Controllers namespace, inferring \"Foo\". [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method)] public class AreaRoutingAttribute : Attribute, IControllerModelConvention Inheritance object Attribute AreaRoutingAttribute Implements IControllerModelConvention Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Methods Apply(ControllerModel) public void Apply(ControllerModel controller) Parameters controller ControllerModel"
  },
  "api/NetEnhancements.AspNet.Conventions.ControllerModelExtensions.html": {
    "href": "api/NetEnhancements.AspNet.Conventions.ControllerModelExtensions.html",
    "title": "Class ControllerModelExtensions",
    "keywords": "Class ControllerModelExtensions Namespace NetEnhancements.AspNet.Conventions Assembly NetEnhancements.AspNet.dll public static class ControllerModelExtensions Inheritance object ControllerModelExtensions Methods RouteAreaNamespace(ControllerModel) Route this controller to an area based on their \"Areas.\" namespace, if any. This prevents having to put [Area(\"Foo\")] on it. public static void RouteAreaNamespace(this ControllerModel controller) Parameters controller ControllerModel"
  },
  "api/NetEnhancements.AspNet.Conventions.DefaultAreaPolicy.html": {
    "href": "api/NetEnhancements.AspNet.Conventions.DefaultAreaPolicy.html",
    "title": "Class DefaultAreaPolicy",
    "keywords": "Class DefaultAreaPolicy Namespace NetEnhancements.AspNet.Conventions Assembly NetEnhancements.AspNet.dll Registers filters for the \"default area policy\", i.e. not applicable to any other registered policy. public record DefaultAreaPolicy : AreaPolicy, IEquatable<AreaPolicy>, IEquatable<DefaultAreaPolicy> Inheritance object AreaPolicy DefaultAreaPolicy Implements IEquatable<AreaPolicy> IEquatable<DefaultAreaPolicy> Inherited Members AreaPolicy.AreaName AreaPolicy.Filters Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors DefaultAreaPolicy() Registers filters for the \"default area policy\", i.e. not applicable to any other registered policy. public DefaultAreaPolicy() Fields PolicyName Placeholder name to recognize the default policy being applied. public const string PolicyName = \"(DefaultPolicy)\" Field Value string"
  },
  "api/NetEnhancements.AspNet.Conventions.DefaultAreaPolicyFilter.html": {
    "href": "api/NetEnhancements.AspNet.Conventions.DefaultAreaPolicyFilter.html",
    "title": "Class DefaultAreaPolicyFilter",
    "keywords": "Class DefaultAreaPolicyFilter Namespace NetEnhancements.AspNet.Conventions Assembly NetEnhancements.AspNet.dll Represents the default policy, applied to all unspecified areas (including no area). public class DefaultAreaPolicyFilter : AuthorizeFilter, IAsyncAuthorizationFilter, IFilterFactory, IFilterMetadata Inheritance object AuthorizeFilter DefaultAreaPolicyFilter Implements IAsyncAuthorizationFilter IFilterFactory IFilterMetadata Inherited Members AuthorizeFilter.OnAuthorizationAsync(AuthorizationFilterContext) AuthorizeFilter.PolicyProvider AuthorizeFilter.AuthorizeData AuthorizeFilter.Policy Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors DefaultAreaPolicyFilter() public DefaultAreaPolicyFilter()"
  },
  "api/NetEnhancements.AspNet.Conventions.html": {
    "href": "api/NetEnhancements.AspNet.Conventions.html",
    "title": "Namespace NetEnhancements.AspNet.Conventions",
    "keywords": "Namespace NetEnhancements.AspNet.Conventions Classes AreaAuthorizationPolicyConvention Applies the provided policies to MVC Controllers and Razor Pages. AreaControllerRoutingConvention Apply this convention to route all controllers based on their \"Areas.\" namespace, if any. This prevents having to put [Area(\"Foo\")] on every controller. AreaPolicy AreaRoutingAttribute Apply to a controller to auto-route its area based on its namespace. So instead of [Area(\"Foo\")], use [AreaRouting] on a controller in the MyProject.Areas.Foo.Controllers namespace, inferring \"Foo\". ControllerModelExtensions DefaultAreaPolicy Registers filters for the \"default area policy\", i.e. not applicable to any other registered policy. DefaultAreaPolicyFilter Represents the default policy, applied to all unspecified areas (including no area). PageModelRoutePrefixConvention Apply to update or remove an area route prefix. RoutePrefixConvention<TControllerBase>"
  },
  "api/NetEnhancements.AspNet.Conventions.PageModelRoutePrefixConvention.html": {
    "href": "api/NetEnhancements.AspNet.Conventions.PageModelRoutePrefixConvention.html",
    "title": "Class PageModelRoutePrefixConvention",
    "keywords": "Class PageModelRoutePrefixConvention Namespace NetEnhancements.AspNet.Conventions Assembly NetEnhancements.AspNet.dll Apply to update or remove an area route prefix. public class PageModelRoutePrefixConvention : IPageRouteModelConvention, IPageConvention Inheritance object PageModelRoutePrefixConvention Implements IPageRouteModelConvention IPageConvention Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors PageModelRoutePrefixConvention(string, string, bool) public PageModelRoutePrefixConvention(string areaName, string prefix, bool removeAreaFromUrl) Parameters areaName string prefix string removeAreaFromUrl bool Methods Apply(PageRouteModel) public void Apply(PageRouteModel model) Parameters model PageRouteModel"
  },
  "api/NetEnhancements.AspNet.Conventions.RoutePrefixConvention-1.html": {
    "href": "api/NetEnhancements.AspNet.Conventions.RoutePrefixConvention-1.html",
    "title": "Class RoutePrefixConvention<TControllerBase>",
    "keywords": "Class RoutePrefixConvention<TControllerBase> Namespace NetEnhancements.AspNet.Conventions Assembly NetEnhancements.AspNet.dll public class RoutePrefixConvention<TControllerBase> : IApplicationModelConvention where TControllerBase : Controller Type Parameters TControllerBase Inheritance object RoutePrefixConvention<TControllerBase> Implements IApplicationModelConvention Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors RoutePrefixConvention(IRouteTemplateProvider) public RoutePrefixConvention(IRouteTemplateProvider route) Parameters route IRouteTemplateProvider Methods Apply(ApplicationModel) public void Apply(ApplicationModel application) Parameters application ApplicationModel"
  },
  "api/NetEnhancements.AspNet.Filters.html": {
    "href": "api/NetEnhancements.AspNet.Filters.html",
    "title": "Namespace NetEnhancements.AspNet.Filters",
    "keywords": "Namespace NetEnhancements.AspNet.Filters Classes UnauthorizedAccessExceptionFilter"
  },
  "api/NetEnhancements.AspNet.Filters.UnauthorizedAccessExceptionFilter.html": {
    "href": "api/NetEnhancements.AspNet.Filters.UnauthorizedAccessExceptionFilter.html",
    "title": "Class UnauthorizedAccessExceptionFilter",
    "keywords": "Class UnauthorizedAccessExceptionFilter Namespace NetEnhancements.AspNet.Filters Assembly NetEnhancements.AspNet.dll public class UnauthorizedAccessExceptionFilter : IExceptionFilter, IFilterMetadata Inheritance object UnauthorizedAccessExceptionFilter Implements IExceptionFilter IFilterMetadata Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Methods OnException(ExceptionContext) public void OnException(ExceptionContext context) Parameters context ExceptionContext"
  },
  "api/NetEnhancements.AspNet.html": {
    "href": "api/NetEnhancements.AspNet.html",
    "title": "Namespace NetEnhancements.AspNet",
    "keywords": "Namespace NetEnhancements.AspNet Classes HtmlHelperExtensions HttpContextExtensions MvcOptionsExtensions RouteModel An ASP.NET Core route. SelectListExtensions SessionExtensions SharedConstants SnakeCaseNamingPolicy ViewContextExtensions"
  },
  "api/NetEnhancements.AspNet.HtmlHelperExtensions.html": {
    "href": "api/NetEnhancements.AspNet.HtmlHelperExtensions.html",
    "title": "Class HtmlHelperExtensions",
    "keywords": "Class HtmlHelperExtensions Namespace NetEnhancements.AspNet Assembly NetEnhancements.AspNet.dll public static class HtmlHelperExtensions Inheritance object HtmlHelperExtensions Methods RawWithLineBreaks(IHtmlHelper, string?) Safely print user input (encoding ALL the things), but with newlines converted to newlines with a {br/}. public static IHtmlContent RawWithLineBreaks(this IHtmlHelper helper, string? text) Parameters helper IHtmlHelper text string Returns IHtmlContent"
  },
  "api/NetEnhancements.AspNet.HttpContextExtensions.html": {
    "href": "api/NetEnhancements.AspNet.HttpContextExtensions.html",
    "title": "Class HttpContextExtensions",
    "keywords": "Class HttpContextExtensions Namespace NetEnhancements.AspNet Assembly NetEnhancements.AspNet.dll public static class HttpContextExtensions Inheritance object HttpContextExtensions Methods GetRequestIPAddress(HttpContext) public static string GetRequestIPAddress(this HttpContext context) Parameters context HttpContext Returns string"
  },
  "api/NetEnhancements.AspNet.MvcOptionsExtensions.html": {
    "href": "api/NetEnhancements.AspNet.MvcOptionsExtensions.html",
    "title": "Class MvcOptionsExtensions",
    "keywords": "Class MvcOptionsExtensions Namespace NetEnhancements.AspNet Assembly NetEnhancements.AspNet.dll public static class MvcOptionsExtensions Inheritance object MvcOptionsExtensions Methods UseAreaControllerNamespace(MvcOptions) Applies the AreaControllerRoutingConvention convention that routes controllers based on their \"Areas.\" namespace, if any. public static void UseAreaControllerNamespace(this MvcOptions options) Parameters options MvcOptions UseGeneralRoutePrefix(RazorPagesOptions, string, string, bool) public static void UseGeneralRoutePrefix(this RazorPagesOptions options, string areaName, string prefix, bool removeAreaFromUrl = false) Parameters options RazorPagesOptions areaName string prefix string removeAreaFromUrl bool UseGeneralRoutePrefix<TControllerBase>(MvcOptions, IRouteTemplateProvider) public static void UseGeneralRoutePrefix<TControllerBase>(this MvcOptions opts, IRouteTemplateProvider routeAttribute) where TControllerBase : Controller Parameters opts MvcOptions routeAttribute IRouteTemplateProvider Type Parameters TControllerBase UseGeneralRoutePrefix<TControllerBase>(MvcOptions, string) public static void UseGeneralRoutePrefix<TControllerBase>(this MvcOptions options, string prefix) where TControllerBase : Controller Parameters options MvcOptions prefix string Type Parameters TControllerBase"
  },
  "api/NetEnhancements.AspNet.RouteModel.html": {
    "href": "api/NetEnhancements.AspNet.RouteModel.html",
    "title": "Class RouteModel",
    "keywords": "Class RouteModel Namespace NetEnhancements.AspNet Assembly NetEnhancements.AspNet.dll An ASP.NET Core route. public class RouteModel Inheritance object RouteModel Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Properties Area The area the route points to. public string? Area { get; set; } Property Value string Name Route name. public string? Name { get; set; } Property Value string Template Route template. public string? Template { get; set; } Property Value string"
  },
  "api/NetEnhancements.AspNet.SelectListExtensions.html": {
    "href": "api/NetEnhancements.AspNet.SelectListExtensions.html",
    "title": "Class SelectListExtensions",
    "keywords": "Class SelectListExtensions Namespace NetEnhancements.AspNet Assembly NetEnhancements.AspNet.dll public static class SelectListExtensions Inheritance object SelectListExtensions Methods ToSelectList<T>(IEnumerable<T>, Func<T, string>, Func<T, string>, string?) Convert any list to a select list. public static ICollection<SelectListItem> ToSelectList<T>(this IEnumerable<T> items, Func<T, string> textSelector, Func<T, string> valueSelector, string? selectedValue = null) Parameters items IEnumerable<T> textSelector Func<T, string> valueSelector Func<T, string> selectedValue string Returns ICollection<SelectListItem> Type Parameters T"
  },
  "api/NetEnhancements.AspNet.Session.html": {
    "href": "api/NetEnhancements.AspNet.Session.html",
    "title": "Namespace NetEnhancements.AspNet.Session",
    "keywords": "Namespace NetEnhancements.AspNet.Session Classes SessionObject<TValue> Stores an object of type TValue in the session by key, serializing it to JSON."
  },
  "api/NetEnhancements.AspNet.Session.SessionObject-1.html": {
    "href": "api/NetEnhancements.AspNet.Session.SessionObject-1.html",
    "title": "Class SessionObject<TValue>",
    "keywords": "Class SessionObject<TValue> Namespace NetEnhancements.AspNet.Session Assembly NetEnhancements.AspNet.dll Stores an object of type TValue in the session by key, serializing it to JSON. public abstract class SessionObject<TValue> where TValue : class, new() Type Parameters TValue Inheritance object SessionObject<TValue> Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors SessionObject(ISession, string) protected SessionObject(ISession session, string key) Parameters session ISession key string Methods Clear() Remove the object from the session. public void Clear() Load() Load the object from the session. public TValue Load() Returns TValue Save(TValue) Save the object to the session. public void Save(TValue value) Parameters value TValue"
  },
  "api/NetEnhancements.AspNet.SessionExtensions.html": {
    "href": "api/NetEnhancements.AspNet.SessionExtensions.html",
    "title": "Class SessionExtensions",
    "keywords": "Class SessionExtensions Namespace NetEnhancements.AspNet Assembly NetEnhancements.AspNet.dll public static class SessionExtensions Inheritance object SessionExtensions Methods ReadObject<TModel>(ISession, string) Reads a JSON-serialized object from session key. public static TModel? ReadObject<TModel>(this ISession session, string key) Parameters session ISession key string Returns TModel Type Parameters TModel WriteObject<TModel>(ISession, string, TModel) Writes a JSON-serialized string to a session key. public static void WriteObject<TModel>(this ISession session, string key, TModel model) Parameters session ISession key string model TModel Type Parameters TModel"
  },
  "api/NetEnhancements.AspNet.SharedConstants.html": {
    "href": "api/NetEnhancements.AspNet.SharedConstants.html",
    "title": "Class SharedConstants",
    "keywords": "Class SharedConstants Namespace NetEnhancements.AspNet Assembly NetEnhancements.AspNet.dll public static class SharedConstants Inheritance object SharedConstants Fields UnknownIpAddress public const string UnknownIpAddress = \"(Unknown)\" Field Value string XForwardedFor public const string XForwardedFor = \"X-Forwarded-For\" Field Value string"
  },
  "api/NetEnhancements.AspNet.SnakeCaseNamingPolicy.html": {
    "href": "api/NetEnhancements.AspNet.SnakeCaseNamingPolicy.html",
    "title": "Class SnakeCaseNamingPolicy",
    "keywords": "Class SnakeCaseNamingPolicy Namespace NetEnhancements.AspNet Assembly NetEnhancements.AspNet.dll public class SnakeCaseNamingPolicy : JsonNamingPolicy Inheritance object JsonNamingPolicy SnakeCaseNamingPolicy Inherited Members JsonNamingPolicy.CamelCase Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Properties Instance public static SnakeCaseNamingPolicy Instance { get; } Property Value SnakeCaseNamingPolicy Methods ConvertName(string) public override string ConvertName(string name) Parameters name string Returns string"
  },
  "api/NetEnhancements.AspNet.TagHelpers.DateTagHelper.html": {
    "href": "api/NetEnhancements.AspNet.TagHelpers.DateTagHelper.html",
    "title": "Class DateTagHelper",
    "keywords": "Class DateTagHelper Namespace NetEnhancements.AspNet.TagHelpers Assembly NetEnhancements.AspNet.dll [HtmlTargetElement(\"date\")] public class DateTagHelper : TagHelper, ITagHelper, ITagHelperComponent Inheritance object TagHelper DateTagHelper Implements ITagHelper ITagHelperComponent Inherited Members TagHelper.Init(TagHelperContext) TagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) TagHelper.Order Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Properties Value public DateTimeOffset? Value { get; set; } Property Value DateTimeOffset? ValueIfNull public string? ValueIfNull { get; set; } Property Value string Methods Process(TagHelperContext, TagHelperOutput) public override void Process(TagHelperContext context, TagHelperOutput output) Parameters context TagHelperContext output TagHelperOutput"
  },
  "api/NetEnhancements.AspNet.TagHelpers.html": {
    "href": "api/NetEnhancements.AspNet.TagHelpers.html",
    "title": "Namespace NetEnhancements.AspNet.TagHelpers",
    "keywords": "Namespace NetEnhancements.AspNet.TagHelpers Classes DateTagHelper PriceTagHelper qMxX-QOV9tI"
  },
  "api/NetEnhancements.AspNet.TagHelpers.PriceTagHelper.html": {
    "href": "api/NetEnhancements.AspNet.TagHelpers.PriceTagHelper.html",
    "title": "Class PriceTagHelper",
    "keywords": "Class PriceTagHelper Namespace NetEnhancements.AspNet.TagHelpers Assembly NetEnhancements.AspNet.dll qMxX-QOV9tI public class PriceTagHelper : TagHelper, ITagHelper, ITagHelperComponent Inheritance object TagHelper PriceTagHelper Implements ITagHelper ITagHelperComponent Inherited Members TagHelper.Init(TagHelperContext) TagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) TagHelper.Order Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Properties Amount public decimal? Amount { get; set; } Property Value decimal? Currency public string? Currency { get; set; } Property Value string Decimals public int? Decimals { get; set; } Property Value int? Methods Process(TagHelperContext, TagHelperOutput) public override void Process(TagHelperContext context, TagHelperOutput output) Parameters context TagHelperContext output TagHelperOutput"
  },
  "api/NetEnhancements.AspNet.Validation.DependencyInjection.html": {
    "href": "api/NetEnhancements.AspNet.Validation.DependencyInjection.html",
    "title": "Class DependencyInjection",
    "keywords": "Class DependencyInjection Namespace NetEnhancements.AspNet.Validation Assembly NetEnhancements.AspNet.dll Dependency Injection container extensions. public static class DependencyInjection Inheritance object DependencyInjection Methods AddValidationAttributeLocalization(IMvcBuilder, Action<ValidationAttributeLocalizerOptions>) Register services for translating data annotation attributes. public static IMvcBuilder AddValidationAttributeLocalization(this IMvcBuilder builder, Action<ValidationAttributeLocalizerOptions> setupAction) Parameters builder IMvcBuilder setupAction Action<ValidationAttributeLocalizerOptions> Returns IMvcBuilder"
  },
  "api/NetEnhancements.AspNet.Validation.html": {
    "href": "api/NetEnhancements.AspNet.Validation.html",
    "title": "Namespace NetEnhancements.AspNet.Validation",
    "keywords": "Namespace NetEnhancements.AspNet.Validation Classes DependencyInjection Dependency Injection container extensions. ModelStateExtensions ModelStateDictionary extensions. NonZeroAttribute Indicates that a numeric property cannot have a value of zero (0). ValidationAttributeLocalizerOptions VatNumberAttribute To validate model with a VAT property. Requires the model to implement IVatValidatable. Interfaces IVatValidatable Applied to models on which you want to apply a VatNumberAttribute."
  },
  "api/NetEnhancements.AspNet.Validation.IVatValidatable.html": {
    "href": "api/NetEnhancements.AspNet.Validation.IVatValidatable.html",
    "title": "Interface IVatValidatable",
    "keywords": "Interface IVatValidatable Namespace NetEnhancements.AspNet.Validation Assembly NetEnhancements.AspNet.dll Applied to models on which you want to apply a VatNumberAttribute. public interface IVatValidatable Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Properties CountryCode string? CountryCode { get; } Property Value string"
  },
  "api/NetEnhancements.AspNet.Validation.ModelStateExtensions.html": {
    "href": "api/NetEnhancements.AspNet.Validation.ModelStateExtensions.html",
    "title": "Class ModelStateExtensions",
    "keywords": "Class ModelStateExtensions Namespace NetEnhancements.AspNet.Validation Assembly NetEnhancements.AspNet.dll ModelStateDictionary extensions. public static class ModelStateExtensions Inheritance object ModelStateExtensions Methods AddValidationErrors(ModelStateDictionary, string, List<ValidationResult>, string?) Adds the error results from Validate<T>(T) to the modelState, prefixed with the member name prefix. In the case of an empty error message provided by a validator, the unknownErrorMessage will be added, which defaults to \"Unknown error\" when not specified otherwise. public static void AddValidationErrors(this ModelStateDictionary modelState, string prefix, List<ValidationResult> errors, string? unknownErrorMessage = null) Parameters modelState ModelStateDictionary prefix string errors List<ValidationResult> unknownErrorMessage string"
  },
  "api/NetEnhancements.AspNet.Validation.NonZeroAttribute.html": {
    "href": "api/NetEnhancements.AspNet.Validation.NonZeroAttribute.html",
    "title": "Class NonZeroAttribute",
    "keywords": "Class NonZeroAttribute Namespace NetEnhancements.AspNet.Validation Assembly NetEnhancements.AspNet.dll Indicates that a numeric property cannot have a value of zero (0). public class NonZeroAttribute : ValidationAttribute Inheritance object Attribute ValidationAttribute NonZeroAttribute Inherited Members ValidationAttribute.FormatErrorMessage(string) ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.IsValid(object, ValidationContext) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType ValidationAttribute.ErrorMessageString ValidationAttribute.RequiresValidationContext Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors NonZeroAttribute() Initializes a new instance with the default error message. public NonZeroAttribute() NonZeroAttribute(Func<string>) Initializes a new instance with the given error message accessor. public NonZeroAttribute(Func<string> errorMessageAccessor) Parameters errorMessageAccessor Func<string> NonZeroAttribute(string) Initializes a new instance with the given error message. public NonZeroAttribute(string errorMessage) Parameters errorMessage string Methods IsValid(object?) public override bool IsValid(object? value) Parameters value object Returns bool"
  },
  "api/NetEnhancements.AspNet.Validation.ValidationAttributeLocalizerOptions.html": {
    "href": "api/NetEnhancements.AspNet.Validation.ValidationAttributeLocalizerOptions.html",
    "title": "Class ValidationAttributeLocalizerOptions",
    "keywords": "Class ValidationAttributeLocalizerOptions Namespace NetEnhancements.AspNet.Validation Assembly NetEnhancements.AspNet.dll public class ValidationAttributeLocalizerOptions Inheritance object ValidationAttributeLocalizerOptions Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Properties ValidationErrorResourceType public Type? ValidationErrorResourceType { get; set; } Property Value Type"
  },
  "api/NetEnhancements.AspNet.Validation.VatNumberAttribute.html": {
    "href": "api/NetEnhancements.AspNet.Validation.VatNumberAttribute.html",
    "title": "Class VatNumberAttribute",
    "keywords": "Class VatNumberAttribute Namespace NetEnhancements.AspNet.Validation Assembly NetEnhancements.AspNet.dll To validate model with a VAT property. Requires the model to implement IVatValidatable. public class VatNumberAttribute : ValidationAttribute Inheritance object Attribute ValidationAttribute VatNumberAttribute Inherited Members ValidationAttribute.FormatErrorMessage(string) ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.IsValid(object) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType ValidationAttribute.ErrorMessageString ValidationAttribute.RequiresValidationContext Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Properties AllowEmpty public bool AllowEmpty { get; set; } Property Value bool AllowSeparatorChars public bool AllowSeparatorChars { get; set; } Property Value bool Methods IsValid(object?, ValidationContext) protected override ValidationResult? IsValid(object? value, ValidationContext validationContext) Parameters value object validationContext ValidationContext Returns ValidationResult"
  },
  "api/NetEnhancements.AspNet.ViewContextExtensions.html": {
    "href": "api/NetEnhancements.AspNet.ViewContextExtensions.html",
    "title": "Class ViewContextExtensions",
    "keywords": "Class ViewContextExtensions Namespace NetEnhancements.AspNet Assembly NetEnhancements.AspNet.dll public static class ViewContextExtensions Inheritance object ViewContextExtensions Methods GetMenuClassName(ViewContext, string) public static string? GetMenuClassName(this ViewContext viewContext, string pageName) Parameters viewContext ViewContext pageName string Returns string"
  },
  "api/NetEnhancements.Business.BusinessResult-1.html": {
    "href": "api/NetEnhancements.Business.BusinessResult-1.html",
    "title": "Class BusinessResult<T>",
    "keywords": "Class BusinessResult<T> Namespace NetEnhancements.Business Assembly NetEnhancements.Business.dll A wrapper class for calls into the business layer, so controllers don't have to do their own error handling. Contains data when successful. public class BusinessResult<T> : BusinessResult Type Parameters T Inheritance object BusinessResult BusinessResult<T> Inherited Members BusinessResult.Succeeded BusinessResult.StatusMessage BusinessResult.NotFound BusinessResult.Error(string) BusinessResult.OtherError Extension Methods BusinessResultToStatusCodeExtensions.ToStatusCode(BusinessResult) CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors BusinessResult(T) A successful result with data. public BusinessResult(T data) Parameters data T BusinessResult(BusinessResult) A failed result with another result's errors. public BusinessResult(BusinessResult other) Parameters other BusinessResult BusinessResult(bool, bool, string?) A failed result without data. public BusinessResult(bool notFound = false, bool otherError = false, string? statusMessage = null) Parameters notFound bool otherError bool statusMessage string Properties Data The data of the result. Not null when Success is true. public T? Data { get; } Property Value T Success Indicates whether the call was successful. When true, Data is not null. public bool Success { get; } Property Value bool Methods FromError(string) Returns an error result. public static BusinessResult<T> FromError(string statusMessage = \"Unspecified error\") Parameters statusMessage string Returns BusinessResult<T> FromNotFound(string?) Returns a result indicating something was not found. public static BusinessResult<T> FromNotFound(string? statusMessage = \"Not found\") Parameters statusMessage string Returns BusinessResult<T> Operators implicit operator BusinessResult<T>(T) Convert a T to a successful BusinessResult<T>. public static implicit operator BusinessResult<T>(T instance) Parameters instance T Returns BusinessResult<T>"
  },
  "api/NetEnhancements.Business.BusinessResult.html": {
    "href": "api/NetEnhancements.Business.BusinessResult.html",
    "title": "Class BusinessResult",
    "keywords": "Class BusinessResult Namespace NetEnhancements.Business Assembly NetEnhancements.Business.dll A wrapper class for calls into the business layer, so controllers don't have to do their own error handling. public class BusinessResult Inheritance object BusinessResult Derived BusinessResult<T> Extension Methods BusinessResultToStatusCodeExtensions.ToStatusCode(BusinessResult) CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors BusinessResult(BusinessResult) A failed result with another result's errors. public BusinessResult(BusinessResult other) Parameters other BusinessResult BusinessResult(bool, bool, string?) public BusinessResult(bool notFound = false, bool otherError = false, string? statusMessage = null) Parameters notFound bool otherError bool statusMessage string Properties NotFound Something (usually an entity) was not found. public bool NotFound { get; } Property Value bool OtherError Indicates that an unknown error occurred. public bool OtherError { get; } Property Value bool StatusMessage Must contain an error message when Success is false. public string? StatusMessage { get; } Property Value string Succeeded Returns a succesful BusinessResult. public static BusinessResult Succeeded { get; } Property Value BusinessResult Success Indicates whether the call was successful. public bool Success { get; } Property Value bool Methods Error(string) Returns an error result. public static BusinessResult Error(string statusMessage = \"Unspecified error\") Parameters statusMessage string Returns BusinessResult"
  },
  "api/NetEnhancements.Business.BusinessResultToStatusCodeExtensions.html": {
    "href": "api/NetEnhancements.Business.BusinessResultToStatusCodeExtensions.html",
    "title": "Class BusinessResultToStatusCodeExtensions",
    "keywords": "Class BusinessResultToStatusCodeExtensions Namespace NetEnhancements.Business Assembly NetEnhancements.Business.dll public static class BusinessResultToStatusCodeExtensions Inheritance object BusinessResultToStatusCodeExtensions Methods BusinessResult(Controller, BusinessResult) public static StatusCodeResult BusinessResult(this Controller _, BusinessResult result) Parameters _ Controller result BusinessResult Returns StatusCodeResult BusinessResult(PageModel, BusinessResult) public static StatusCodeResult BusinessResult(this PageModel _, BusinessResult result) Parameters _ PageModel result BusinessResult Returns StatusCodeResult ToStatusCode(BusinessResult) Returns a 200 OK, 404 Not Found or 500 Internal Server error, corresponding to result's properties. public static StatusCodeResult ToStatusCode(this BusinessResult result) Parameters result BusinessResult Returns StatusCodeResult"
  },
  "api/NetEnhancements.Business.html": {
    "href": "api/NetEnhancements.Business.html",
    "title": "Namespace NetEnhancements.Business",
    "keywords": "Namespace NetEnhancements.Business Classes BusinessResult A wrapper class for calls into the business layer, so controllers don't have to do their own error handling. BusinessResult<T> A wrapper class for calls into the business layer, so controllers don't have to do their own error handling. Contains data when successful. BusinessResultToStatusCodeExtensions"
  },
  "api/NetEnhancements.Business.Managers.html": {
    "href": "api/NetEnhancements.Business.Managers.html",
    "title": "Namespace NetEnhancements.Business.Managers",
    "keywords": "Namespace NetEnhancements.Business.Managers Classes ManagerBase<TDbContext> Base class for Business Logic classes that talk to the database, which prevents you from having to create try-catch blocks."
  },
  "api/NetEnhancements.Business.Managers.ManagerBase-1.html": {
    "href": "api/NetEnhancements.Business.Managers.ManagerBase-1.html",
    "title": "Class ManagerBase<TDbContext>",
    "keywords": "Class ManagerBase<TDbContext> Namespace NetEnhancements.Business.Managers Assembly NetEnhancements.Business.dll Base class for Business Logic classes that talk to the database, which prevents you from having to create try-catch blocks. public abstract class ManagerBase<TDbContext> where TDbContext : DbContext Type Parameters TDbContext Inheritance object ManagerBase<TDbContext> Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors ManagerBase(ILogger<ManagerBase<TDbContext>>, TDbContext) protected ManagerBase(ILogger<ManagerBase<TDbContext>> logger, TDbContext dbContext) Parameters logger ILogger<ManagerBase<TDbContext>> dbContext TDbContext Fields DbContext protected readonly TDbContext DbContext Field Value TDbContext Logger protected readonly ILogger<ManagerBase<TDbContext>> Logger Field Value ILogger<ManagerBase<TDbContext>> Methods Entity<TEntity>(TEntity?, string?) protected BusinessResult<TEntity> Entity<TEntity>(TEntity? entity, string? callerMember = null) where TEntity : class Parameters entity TEntity callerMember string Returns BusinessResult<TEntity> Type Parameters TEntity SaveChangesAsync<T>(T, bool, string?) Saves changes and returns a succesful BusinessResult<T> when any rows were affected. protected Task<BusinessResult<T>> SaveChangesAsync<T>(T entity, bool allowZeroRowsAffected = false, string? callerMember = null) Parameters entity T allowZeroRowsAffected bool callerMember string Returns Task<BusinessResult<T>> Type Parameters T TryAsync(Func<Task<BusinessResult>>, string?) Wrapper to handle logging and Exception handling for async methods returning a BusinessResult. public Task<BusinessResult> TryAsync(Func<Task<BusinessResult>> methodBody, string? callerMember = null) Parameters methodBody Func<Task<BusinessResult>> callerMember string Returns Task<BusinessResult> TryAsync<TResult>(Func<Task<TResult?>>, string?) Wrapper to handle logging and EntityNotFoundException handling for async methods returning a BusinessResult<T>. public Task<BusinessResult<TResult>> TryAsync<TResult>(Func<Task<TResult?>> methodBody, string? callerMember = null) where TResult : class Parameters methodBody Func<Task<TResult>> callerMember string Returns Task<BusinessResult<TResult>> Type Parameters TResult TryAsync<TResult>(Func<Task<BusinessResult<TResult>>>, string?) Wrapper to handle logging and EntityNotFoundException handling for async methods returning a BusinessResult<T>. public Task<BusinessResult<TResult>> TryAsync<TResult>(Func<Task<BusinessResult<TResult>>> methodBody, string? callerMember = null) where TResult : class Parameters methodBody Func<Task<BusinessResult<TResult>>> callerMember string Returns Task<BusinessResult<TResult>> Type Parameters TResult"
  },
  "api/NetEnhancements.ClosedXML.CellExtensions.html": {
    "href": "api/NetEnhancements.ClosedXML.CellExtensions.html",
    "title": "Class CellExtensions",
    "keywords": "Class CellExtensions Namespace NetEnhancements.ClosedXML Assembly NetEnhancements.ClosedXML.dll Extension method container. public static class CellExtensions Inheritance object CellExtensions Methods GetNullableValue<TValue>(IXLCell, TValue?) Read a cell's value, returning a default value when unable to. public static TValue? GetNullableValue<TValue>(this IXLCell cell, TValue? defaultValue = default) where TValue : IComparable<TValue> Parameters cell IXLCell defaultValue TValue Returns TValue Type Parameters TValue"
  },
  "api/NetEnhancements.ClosedXML.ColumnExtensions.html": {
    "href": "api/NetEnhancements.ClosedXML.ColumnExtensions.html",
    "title": "Class ColumnExtensions",
    "keywords": "Class ColumnExtensions Namespace NetEnhancements.ClosedXML Assembly NetEnhancements.ClosedXML.dll Extension method container. public static class ColumnExtensions Inheritance object ColumnExtensions Methods LetterToIndex(string) Returns the column index from its name (\"A\" = 0, \"AA\" = 26, ...). public static int LetterToIndex(string columnName) Parameters columnName string Returns int"
  },
  "api/NetEnhancements.ClosedXML.html": {
    "href": "api/NetEnhancements.ClosedXML.html",
    "title": "Namespace NetEnhancements.ClosedXML",
    "keywords": "Namespace NetEnhancements.ClosedXML Classes CellExtensions Extension method container. ColumnExtensions Extension method container. RowParser<TRow> Parses an ClosedXML.Excel.IXLRow into the given TRow type. WorksheetExtensions Parses rows into objects."
  },
  "api/NetEnhancements.ClosedXML.RowParser-1.html": {
    "href": "api/NetEnhancements.ClosedXML.RowParser-1.html",
    "title": "Class RowParser<TRow>",
    "keywords": "Class RowParser<TRow> Namespace NetEnhancements.ClosedXML Assembly NetEnhancements.ClosedXML.dll Parses an ClosedXML.Excel.IXLRow into the given TRow type. public class RowParser<TRow> where TRow : class, new() Type Parameters TRow Inheritance object RowParser<TRow> Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors RowParser() Initialize a new instance. public RowParser() Methods ParseRow(IXLRow) Parse an ClosedXML.Excel.IXLRow into the given TRow type. public TRow ParseRow(IXLRow row) Parameters row IXLRow Returns TRow"
  },
  "api/NetEnhancements.ClosedXML.WorksheetExtensions.html": {
    "href": "api/NetEnhancements.ClosedXML.WorksheetExtensions.html",
    "title": "Class WorksheetExtensions",
    "keywords": "Class WorksheetExtensions Namespace NetEnhancements.ClosedXML Assembly NetEnhancements.ClosedXML.dll Parses rows into objects. public static class WorksheetExtensions Inheritance object WorksheetExtensions Methods ParseRowsAsync<TRow>(IXLWorksheet, int) Read a sheet's used rows into a collection of objects. public static IAsyncEnumerable<TRow> ParseRowsAsync<TRow>(this IXLWorksheet worksheet, int rowsToSkip = 1) where TRow : class, new() Parameters worksheet IXLWorksheet rowsToSkip int Returns IAsyncEnumerable<TRow> Type Parameters TRow"
  },
  "api/NetEnhancements.EntityFramework.DateOnlyComparer.html": {
    "href": "api/NetEnhancements.EntityFramework.DateOnlyComparer.html",
    "title": "Class DateOnlyComparer",
    "keywords": "Class DateOnlyComparer Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll Compares DateOnly. public class DateOnlyComparer : ValueComparer<DateOnly>, IEqualityComparer, IEqualityComparer<object>, IEqualityComparer<DateOnly> Inheritance object ValueComparer ValueComparer<DateOnly> DateOnlyComparer Implements IEqualityComparer IEqualityComparer<object> IEqualityComparer<DateOnly> Inherited Members ValueComparer<DateOnly>.CreateDefaultEqualsExpression() ValueComparer<DateOnly>.CreateDefaultSnapshotExpression(bool) ValueComparer<DateOnly>.CreateDefaultHashCodeExpression(bool) ValueComparer<DateOnly>.Equals(object, object) ValueComparer<DateOnly>.GetHashCode(object) ValueComparer<DateOnly>.Equals(DateOnly, DateOnly) ValueComparer<DateOnly>.GetHashCode(DateOnly) ValueComparer<DateOnly>.Snapshot(object) ValueComparer<DateOnly>.Snapshot(DateOnly) ValueComparer<DateOnly>.Type ValueComparer<DateOnly>.EqualsExpression ValueComparer<DateOnly>.HashCodeExpression ValueComparer<DateOnly>.SnapshotExpression ValueComparer.ExtractEqualsBody(Expression, Expression) ValueComparer.ExtractHashCodeBody(Expression) ValueComparer.ExtractSnapshotBody(Expression) ValueComparer.CreateDefault(Type, bool) Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors DateOnlyComparer() Creates a new instance of this converter. public DateOnlyComparer()"
  },
  "api/NetEnhancements.EntityFramework.DateOnlyConverter.html": {
    "href": "api/NetEnhancements.EntityFramework.DateOnlyConverter.html",
    "title": "Class DateOnlyConverter",
    "keywords": "Class DateOnlyConverter Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll Converts DateOnly to DateTime and vice versa. public class DateOnlyConverter : ValueConverter<DateOnly, DateTime> Inheritance object ValueConverter ValueConverter<DateOnly, DateTime> DateOnlyConverter Inherited Members ValueConverter<DateOnly, DateTime>.ConvertToProvider ValueConverter<DateOnly, DateTime>.ConvertFromProvider ValueConverter<DateOnly, DateTime>.ConvertToProviderExpression ValueConverter<DateOnly, DateTime>.ConvertFromProviderExpression ValueConverter<DateOnly, DateTime>.ModelClrType ValueConverter<DateOnly, DateTime>.ProviderClrType ValueConverter.CheckTypeSupported(Type, Type, params Type[]) ValueConverter.ComposeWith(ValueConverter) ValueConverter.ConvertToProvider ValueConverter.ConvertFromProvider ValueConverter.ConvertToProviderExpression ValueConverter.ConvertFromProviderExpression ValueConverter.ModelClrType ValueConverter.ProviderClrType ValueConverter.MappingHints ValueConverter.ConvertsNulls Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors DateOnlyConverter() Creates a new instance of this converter. public DateOnlyConverter()"
  },
  "api/NetEnhancements.EntityFramework.DbContextExtensions.html": {
    "href": "api/NetEnhancements.EntityFramework.DbContextExtensions.html",
    "title": "Class DbContextExtensions",
    "keywords": "Class DbContextExtensions Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll public static class DbContextExtensions Inheritance object DbContextExtensions Methods DisableIdentityInsert<TEntity>(DbContext) public static Task DisableIdentityInsert<TEntity>(this DbContext context) Parameters context DbContext Returns Task Type Parameters TEntity EnableIdentityInsert<TEntity>(DbContext) public static Task EnableIdentityInsert<TEntity>(this DbContext context) Parameters context DbContext Returns Task Type Parameters TEntity SaveChanges<TEntity>(DbContext) public static int SaveChanges<TEntity>(this DbContext context) Parameters context DbContext Returns int Type Parameters TEntity"
  },
  "api/NetEnhancements.EntityFramework.Entity.html": {
    "href": "api/NetEnhancements.EntityFramework.Entity.html",
    "title": "Class Entity",
    "keywords": "Class Entity Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll Base entity with created/modified fields. public abstract class Entity : ITimestampedEntity Inheritance object Entity Implements ITimestampedEntity Derived GuidIdEntity IntIdEntity Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Properties Created public DateTimeOffset Created { get; set; } Property Value DateTimeOffset Modified public DateTimeOffset? Modified { get; set; } Property Value DateTimeOffset?"
  },
  "api/NetEnhancements.EntityFramework.EntityExtensions.html": {
    "href": "api/NetEnhancements.EntityFramework.EntityExtensions.html",
    "title": "Class EntityExtensions",
    "keywords": "Class EntityExtensions Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll public static class EntityExtensions Inheritance object EntityExtensions Methods ApplyOrder<TEntity>(IQueryable<TEntity>, DataQuery, Func<string, Expression<Func<TEntity, object?>>>) Applies order. public static IQueryable<TEntity> ApplyOrder<TEntity>(this IQueryable<TEntity> queryable, DataQuery query, Func<string, Expression<Func<TEntity, object?>>> orderer) where TEntity : class Parameters queryable IQueryable<TEntity> query DataQuery orderer Func<string, Expression<Func<TEntity, object>>> Translates an order string (e.g. \"name\") to an expression on the entity (e.g. u => u.Name) Returns IQueryable<TEntity> Type Parameters TEntity Page<T>(IQueryable<T>, PagedQuery) Calls Skip() and Take() to perform pagination as specified in the request. public static IQueryable<T> Page<T>(this IQueryable<T> source, PagedQuery request) Parameters source IQueryable<T> request PagedQuery Returns IQueryable<T> Type Parameters T"
  },
  "api/NetEnhancements.EntityFramework.EntityNotFoundException.html": {
    "href": "api/NetEnhancements.EntityFramework.EntityNotFoundException.html",
    "title": "Class EntityNotFoundException",
    "keywords": "Class EntityNotFoundException Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll An exception indicating an expected entity was not found. public class EntityNotFoundException : Exception, ISerializable Inheritance object Exception EntityNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Methods FromEntity<TEntity>(object, params object[]) Initialize the exception with an entity type TEntity and the given primary key value(s). public static EntityNotFoundException FromEntity<TEntity>(object primaryKey, params object[] additionalKeys) Parameters primaryKey object additionalKeys object[] Returns EntityNotFoundException Type Parameters TEntity"
  },
  "api/NetEnhancements.EntityFramework.GuidIdEntity.html": {
    "href": "api/NetEnhancements.EntityFramework.GuidIdEntity.html",
    "title": "Class GuidIdEntity",
    "keywords": "Class GuidIdEntity Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll Base entity with a GUID as PK and created/modified fields. public abstract class GuidIdEntity : Entity, ITimestampedEntity, IGuidIdEntity Inheritance object Entity GuidIdEntity Implements ITimestampedEntity IGuidIdEntity Derived ImageBase<TCategory> Inherited Members Entity.Created Entity.Modified Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Properties Id public Guid Id { get; set; } Property Value Guid"
  },
  "api/NetEnhancements.EntityFramework.html": {
    "href": "api/NetEnhancements.EntityFramework.html",
    "title": "Namespace NetEnhancements.EntityFramework",
    "keywords": "Namespace NetEnhancements.EntityFramework Classes DateOnlyComparer Compares DateOnly. DateOnlyConverter Converts DateOnly to DateTime and vice versa. DbContextExtensions Entity Base entity with created/modified fields. EntityExtensions EntityNotFoundException An exception indicating an expected entity was not found. GuidIdEntity Base entity with a GUID as PK and created/modified fields. IntIdEntity Base entity with an int as PK and created/modified fields. ModelBuilderExtension From various posts at https://stackoverflow.com/questions/47673524/ef-core-soft-delete-with-shadow-properties-and-query-filters ModelConfigurationBuilderExtensions Entity Framework doesn't support DateOnly/TimeOnly natively. https://github.com/dotnet/efcore/issues/24507 https://github.com/dotnet/SqlClient/issues/1009 https://learn.microsoft.com/en-us/ef/core/what-is-new/ef-core-8.0/whatsnew#dateonlytimeonly-supported-on-sql-server (Soon) NullableDateOnlyComparer Compares Nullable<T>. NullableDateOnlyConverter Converts nullable DateOnly to nullable DateTime and vice versa. NullableTimeOnlyComparer Compares Nullable<T>. NullableTimeOnlyConverter Converts nullable TimeOnly to nullable TimeSpan and vice versa. TimeOnlyComparer Compares TimeOnly. TimeOnlyConverter Converts TimeOnly to nullable TimeSpan and vice versa. TimestampedEntityAttribute Entities annotated with this will have their Interfaces IGuidIdEntity Denotes an entity with a Guid Id. ITimestampedEntity Denotes an entity with a Created and Modified property."
  },
  "api/NetEnhancements.EntityFramework.IGuidIdEntity.html": {
    "href": "api/NetEnhancements.EntityFramework.IGuidIdEntity.html",
    "title": "Interface IGuidIdEntity",
    "keywords": "Interface IGuidIdEntity Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll Denotes an entity with a Guid Id. public interface IGuidIdEntity Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Properties Id The primary key of this entity, as Guid. [DatabaseGenerated(DatabaseGeneratedOption.Computed)] Guid Id { get; set; } Property Value Guid"
  },
  "api/NetEnhancements.EntityFramework.IntIdEntity.html": {
    "href": "api/NetEnhancements.EntityFramework.IntIdEntity.html",
    "title": "Class IntIdEntity",
    "keywords": "Class IntIdEntity Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll Base entity with an int as PK and created/modified fields. public abstract class IntIdEntity : Entity, ITimestampedEntity Inheritance object Entity IntIdEntity Implements ITimestampedEntity Derived CategoryBase Inherited Members Entity.Created Entity.Modified Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Properties Id [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public int Id { get; set; } Property Value int"
  },
  "api/NetEnhancements.EntityFramework.ITimestampedEntity.html": {
    "href": "api/NetEnhancements.EntityFramework.ITimestampedEntity.html",
    "title": "Interface ITimestampedEntity",
    "keywords": "Interface ITimestampedEntity Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll Denotes an entity with a Created and Modified property. public interface ITimestampedEntity Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Properties Created [DatabaseGenerated(DatabaseGeneratedOption.Computed)] DateTimeOffset Created { get; set; } Property Value DateTimeOffset Modified [DatabaseGenerated(DatabaseGeneratedOption.Computed)] DateTimeOffset? Modified { get; set; } Property Value DateTimeOffset?"
  },
  "api/NetEnhancements.EntityFramework.ModelBuilderExtension.html": {
    "href": "api/NetEnhancements.EntityFramework.ModelBuilderExtension.html",
    "title": "Class ModelBuilderExtension",
    "keywords": "Class ModelBuilderExtension Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll From various posts at https://stackoverflow.com/questions/47673524/ef-core-soft-delete-with-shadow-properties-and-query-filters public static class ModelBuilderExtension Inheritance object ModelBuilderExtension Methods ApplyDefaultValues(ModelBuilder) Apply default Id, Created and Modified values for all IGuidIdEntity/ITimestampedEntity-derived types known to the context's modelBuilder it's called on. public static void ApplyDefaultValues(this ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder ApplyEntityTypeBuilder<TBase>(ModelBuilder, Action<EntityTypeBuilder<TBase>>) BROKEN, not covariant. Calls the expression action with a ModelBuilder for each entity inheriting from TBase. public static void ApplyEntityTypeBuilder<TBase>(this ModelBuilder modelBuilder, Action<EntityTypeBuilder<TBase>> expression) where TBase : class Parameters modelBuilder ModelBuilder expression Action<EntityTypeBuilder<TBase>> Type Parameters TBase Examples modelBuilder.ApplyEntityTypeBuilder{OwnedEntity}( e => e.HasOne(...) ); ApplyEntityTypeBuilder<TBase>(ModelBuilder, Action<EntityTypeBuilder>) Calls the expression action with a ModelBuilder for each entity inheriting from TBase. Usage: modelBuilder.ApplyEntityTypeBuilder{OwnedEntity}( e => e.HasOne(...) ); public static void ApplyEntityTypeBuilder<TBase>(this ModelBuilder modelBuilder, Action<EntityTypeBuilder> expression) where TBase : class Parameters modelBuilder ModelBuilder expression Action<EntityTypeBuilder> Type Parameters TBase ApplyGlobalFilters<TEntity, TAttribute>(ModelBuilder, Expression<Func<TEntity, bool>>) Applies the given expression query filter to all entities that are or inherit from TEntity. Usage: builder.ApplyGlobalFilters{BaseEntity, SoftDeleteAttribute}(e => e.Deleted == null); public static void ApplyGlobalFilters<TEntity, TAttribute>(this ModelBuilder modelBuilder, Expression<Func<TEntity, bool>> expression) where TEntity : class where TAttribute : Attribute Parameters modelBuilder ModelBuilder expression Expression<Func<TEntity, bool>> Type Parameters TEntity TAttribute ApplyPropertyBuilder<TBase>(ModelBuilder, Expression<Func<TBase, object?>>, Action<PropertyBuilder>) Calls the expression action with a PropertyBuilder for each entity inheriting from TBase. public static void ApplyPropertyBuilder<TBase>(this ModelBuilder modelBuilder, Expression<Func<TBase, object?>> propertyExpression, Action<PropertyBuilder> expression) where TBase : class Parameters modelBuilder ModelBuilder propertyExpression Expression<Func<TBase, object>> expression Action<PropertyBuilder> Type Parameters TBase Examples modelBuilder.ApplyPropertyBuilder{IGuidEntity}( e => e.Id, prop => prop.HasDefaultValueSql(\"NEWID()\") ); EnumToString<TEnum>(PropertyBuilder<TEnum>) Maps an enum member to and from string. TODO: does this work for flags enums? TODO: the hardcoded 64 is not safe. public static PropertyBuilder<TEnum> EnumToString<TEnum>(this PropertyBuilder<TEnum> propertyBuilder) where TEnum : struct, Enum Parameters propertyBuilder PropertyBuilder<TEnum> Returns PropertyBuilder<TEnum> Type Parameters TEnum GetAnnotatedEntities<TBase, TAttribute>(ModelBuilder) Returns entities known to the ModelBuilder that are annotated with the given TAttribute. public static IList<IMutableEntityType> GetAnnotatedEntities<TBase, TAttribute>(this ModelBuilder modelBuilder) where TBase : class where TAttribute : Attribute Parameters modelBuilder ModelBuilder Returns IList<IMutableEntityType> Type Parameters TBase TAttribute GetInheritingEntities<TBase>(ModelBuilder) Returns entities known to the ModelBuilder that derive from the given TBase. public static IEnumerable<IMutableEntityType> GetInheritingEntities<TBase>(this ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder Returns IEnumerable<IMutableEntityType> Type Parameters TBase RestrictAllCascades(ModelBuilder, Func<IMutableEntityType, bool>?) Restrict ALL the cascades. Don't want one DELETE FROM Locations to clear the entire DB. public static void RestrictAllCascades(this ModelBuilder modelBuilder, Func<IMutableEntityType, bool>? selector = null) Parameters modelBuilder ModelBuilder selector Func<IMutableEntityType, bool>"
  },
  "api/NetEnhancements.EntityFramework.ModelConfigurationBuilderExtensions.html": {
    "href": "api/NetEnhancements.EntityFramework.ModelConfigurationBuilderExtensions.html",
    "title": "Class ModelConfigurationBuilderExtensions",
    "keywords": "Class ModelConfigurationBuilderExtensions Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll Entity Framework doesn't support DateOnly/TimeOnly natively. https://github.com/dotnet/efcore/issues/24507 https://github.com/dotnet/SqlClient/issues/1009 https://learn.microsoft.com/en-us/ef/core/what-is-new/ef-core-8.0/whatsnew#dateonlytimeonly-supported-on-sql-server (Soon) public static class ModelConfigurationBuilderExtensions Inheritance object ModelConfigurationBuilderExtensions Methods AddDateOnly(ModelConfigurationBuilder) Add support for DateOnly to Entity Framework Core. public static ModelConfigurationBuilder AddDateOnly(this ModelConfigurationBuilder builder) Parameters builder ModelConfigurationBuilder Returns ModelConfigurationBuilder AddTimeOnly(ModelConfigurationBuilder) Add support for TimeOnly to Entity Framework Core. public static ModelConfigurationBuilder AddTimeOnly(this ModelConfigurationBuilder builder) Parameters builder ModelConfigurationBuilder Returns ModelConfigurationBuilder"
  },
  "api/NetEnhancements.EntityFramework.NullableDateOnlyComparer.html": {
    "href": "api/NetEnhancements.EntityFramework.NullableDateOnlyComparer.html",
    "title": "Class NullableDateOnlyComparer",
    "keywords": "Class NullableDateOnlyComparer Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll Compares Nullable<T>. public class NullableDateOnlyComparer : ValueComparer<DateOnly?>, IEqualityComparer, IEqualityComparer<object>, IEqualityComparer<DateOnly?> Inheritance object ValueComparer ValueComparer<DateOnly?> NullableDateOnlyComparer Implements IEqualityComparer IEqualityComparer<object> IEqualityComparer<DateOnly?> Inherited Members ValueComparer<DateOnly?>.CreateDefaultEqualsExpression() ValueComparer<DateOnly?>.CreateDefaultSnapshotExpression(bool) ValueComparer<DateOnly?>.CreateDefaultHashCodeExpression(bool) ValueComparer<DateOnly?>.Equals(object, object) ValueComparer<DateOnly?>.GetHashCode(object) ValueComparer<DateOnly?>.Equals(DateOnly?, DateOnly?) ValueComparer<DateOnly?>.GetHashCode(DateOnly?) ValueComparer<DateOnly?>.Snapshot(object) ValueComparer<DateOnly?>.Snapshot(DateOnly?) ValueComparer<DateOnly?>.Type ValueComparer<DateOnly?>.EqualsExpression ValueComparer<DateOnly?>.HashCodeExpression ValueComparer<DateOnly?>.SnapshotExpression ValueComparer.ExtractEqualsBody(Expression, Expression) ValueComparer.ExtractHashCodeBody(Expression) ValueComparer.ExtractSnapshotBody(Expression) ValueComparer.CreateDefault(Type, bool) Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors NullableDateOnlyComparer() Creates a new instance of this converter. public NullableDateOnlyComparer()"
  },
  "api/NetEnhancements.EntityFramework.NullableDateOnlyConverter.html": {
    "href": "api/NetEnhancements.EntityFramework.NullableDateOnlyConverter.html",
    "title": "Class NullableDateOnlyConverter",
    "keywords": "Class NullableDateOnlyConverter Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll Converts nullable DateOnly to nullable DateTime and vice versa. public class NullableDateOnlyConverter : ValueConverter<DateOnly?, DateTime?> Inheritance object ValueConverter ValueConverter<DateOnly?, DateTime?> NullableDateOnlyConverter Inherited Members ValueConverter<DateOnly?, DateTime?>.ConvertToProvider ValueConverter<DateOnly?, DateTime?>.ConvertFromProvider ValueConverter<DateOnly?, DateTime?>.ConvertToProviderExpression ValueConverter<DateOnly?, DateTime?>.ConvertFromProviderExpression ValueConverter<DateOnly?, DateTime?>.ModelClrType ValueConverter<DateOnly?, DateTime?>.ProviderClrType ValueConverter.CheckTypeSupported(Type, Type, params Type[]) ValueConverter.ComposeWith(ValueConverter) ValueConverter.ConvertToProvider ValueConverter.ConvertFromProvider ValueConverter.ConvertToProviderExpression ValueConverter.ConvertFromProviderExpression ValueConverter.ModelClrType ValueConverter.ProviderClrType ValueConverter.MappingHints ValueConverter.ConvertsNulls Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors NullableDateOnlyConverter() Creates a new instance of this converter. public NullableDateOnlyConverter()"
  },
  "api/NetEnhancements.EntityFramework.NullableTimeOnlyComparer.html": {
    "href": "api/NetEnhancements.EntityFramework.NullableTimeOnlyComparer.html",
    "title": "Class NullableTimeOnlyComparer",
    "keywords": "Class NullableTimeOnlyComparer Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll Compares Nullable<T>. public class NullableTimeOnlyComparer : ValueComparer<TimeOnly?>, IEqualityComparer, IEqualityComparer<object>, IEqualityComparer<TimeOnly?> Inheritance object ValueComparer ValueComparer<TimeOnly?> NullableTimeOnlyComparer Implements IEqualityComparer IEqualityComparer<object> IEqualityComparer<TimeOnly?> Inherited Members ValueComparer<TimeOnly?>.CreateDefaultEqualsExpression() ValueComparer<TimeOnly?>.CreateDefaultSnapshotExpression(bool) ValueComparer<TimeOnly?>.CreateDefaultHashCodeExpression(bool) ValueComparer<TimeOnly?>.Equals(object, object) ValueComparer<TimeOnly?>.GetHashCode(object) ValueComparer<TimeOnly?>.Equals(TimeOnly?, TimeOnly?) ValueComparer<TimeOnly?>.GetHashCode(TimeOnly?) ValueComparer<TimeOnly?>.Snapshot(object) ValueComparer<TimeOnly?>.Snapshot(TimeOnly?) ValueComparer<TimeOnly?>.Type ValueComparer<TimeOnly?>.EqualsExpression ValueComparer<TimeOnly?>.HashCodeExpression ValueComparer<TimeOnly?>.SnapshotExpression ValueComparer.ExtractEqualsBody(Expression, Expression) ValueComparer.ExtractHashCodeBody(Expression) ValueComparer.ExtractSnapshotBody(Expression) ValueComparer.CreateDefault(Type, bool) Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors NullableTimeOnlyComparer() Creates a new instance of this converter. public NullableTimeOnlyComparer()"
  },
  "api/NetEnhancements.EntityFramework.NullableTimeOnlyConverter.html": {
    "href": "api/NetEnhancements.EntityFramework.NullableTimeOnlyConverter.html",
    "title": "Class NullableTimeOnlyConverter",
    "keywords": "Class NullableTimeOnlyConverter Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll Converts nullable TimeOnly to nullable TimeSpan and vice versa. public class NullableTimeOnlyConverter : ValueConverter<TimeOnly?, TimeSpan?> Inheritance object ValueConverter ValueConverter<TimeOnly?, TimeSpan?> NullableTimeOnlyConverter Inherited Members ValueConverter<TimeOnly?, TimeSpan?>.ConvertToProvider ValueConverter<TimeOnly?, TimeSpan?>.ConvertFromProvider ValueConverter<TimeOnly?, TimeSpan?>.ConvertToProviderExpression ValueConverter<TimeOnly?, TimeSpan?>.ConvertFromProviderExpression ValueConverter<TimeOnly?, TimeSpan?>.ModelClrType ValueConverter<TimeOnly?, TimeSpan?>.ProviderClrType ValueConverter.CheckTypeSupported(Type, Type, params Type[]) ValueConverter.ComposeWith(ValueConverter) ValueConverter.ConvertToProvider ValueConverter.ConvertFromProvider ValueConverter.ConvertToProviderExpression ValueConverter.ConvertFromProviderExpression ValueConverter.ModelClrType ValueConverter.ProviderClrType ValueConverter.MappingHints ValueConverter.ConvertsNulls Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors NullableTimeOnlyConverter() Creates a new instance of this converter. public NullableTimeOnlyConverter()"
  },
  "api/NetEnhancements.EntityFramework.Query.DataQuery.html": {
    "href": "api/NetEnhancements.EntityFramework.Query.DataQuery.html",
    "title": "Class DataQuery",
    "keywords": "Class DataQuery Namespace NetEnhancements.EntityFramework.Query Assembly NetEnhancements.EntityFramework.dll Allows for passing query strings and sort clauses from controllers to managers. TODO: nested queries, range queries, this is a POC. public class DataQuery : PagedQuery Inheritance object PagedQuery DataQuery Inherited Members PagedQuery.DefaultPerPage PagedQuery.PageNumber PagedQuery.PerPage Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Properties OrderExpressions public IReadOnlyCollection<OrderExpression> OrderExpressions { get; } Property Value IReadOnlyCollection<OrderExpression> QueryExpressions public IReadOnlyCollection<QueryExpression> QueryExpressions { get; } Property Value IReadOnlyCollection<QueryExpression> Methods AddOrder(string?, OrderDirection) public DataQuery AddOrder(string? order, OrderDirection direction = OrderDirection.Ascending) Parameters order string direction OrderDirection Returns DataQuery AddQuery(string) public DataQuery AddQuery(string query) Parameters query string Returns DataQuery Order(string?, OrderDirection) public static DataQuery Order(string? order, OrderDirection direction = OrderDirection.Ascending) Parameters order string direction OrderDirection Returns DataQuery Query(string?) public static DataQuery Query(string? query) Parameters query string Returns DataQuery SetPageNumber(int) public DataQuery SetPageNumber(int page) Parameters page int Returns DataQuery SetPerPage(int) public DataQuery SetPerPage(int perPage) Parameters perPage int Returns DataQuery"
  },
  "api/NetEnhancements.EntityFramework.Query.html": {
    "href": "api/NetEnhancements.EntityFramework.Query.html",
    "title": "Namespace NetEnhancements.EntityFramework.Query",
    "keywords": "Namespace NetEnhancements.EntityFramework.Query Classes DataQuery Allows for passing query strings and sort clauses from controllers to managers. TODO: nested queries, range queries, this is a POC. OrderExpression PagedQuery PagedResults<T> QueryExpression Enums OrderDirection"
  },
  "api/NetEnhancements.EntityFramework.Query.OrderDirection.html": {
    "href": "api/NetEnhancements.EntityFramework.Query.OrderDirection.html",
    "title": "Enum OrderDirection",
    "keywords": "Enum OrderDirection Namespace NetEnhancements.EntityFramework.Query Assembly NetEnhancements.EntityFramework.dll public enum OrderDirection Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) EnumExtensions.GetDisplayName(Enum) Fields Ascending = 0 Descending = 1"
  },
  "api/NetEnhancements.EntityFramework.Query.OrderExpression.html": {
    "href": "api/NetEnhancements.EntityFramework.Query.OrderExpression.html",
    "title": "Class OrderExpression",
    "keywords": "Class OrderExpression Namespace NetEnhancements.EntityFramework.Query Assembly NetEnhancements.EntityFramework.dll public class OrderExpression Inheritance object OrderExpression Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors OrderExpression(string, OrderDirection) public OrderExpression(string order, OrderDirection direction = OrderDirection.Ascending) Parameters order string direction OrderDirection Properties Direction public OrderDirection Direction { get; } Property Value OrderDirection Order public string Order { get; } Property Value string Operators implicit operator OrderExpression(string) public static implicit operator OrderExpression(string order) Parameters order string Returns OrderExpression"
  },
  "api/NetEnhancements.EntityFramework.Query.PagedQuery.html": {
    "href": "api/NetEnhancements.EntityFramework.Query.PagedQuery.html",
    "title": "Class PagedQuery",
    "keywords": "Class PagedQuery Namespace NetEnhancements.EntityFramework.Query Assembly NetEnhancements.EntityFramework.dll public class PagedQuery Inheritance object PagedQuery Derived DataQuery Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Fields DefaultPerPage public const int DefaultPerPage = 24 Field Value int Properties PageNumber The one-based \"page\" of items to retrieve. public int PageNumber { get; set; } Property Value int PerPage The number of items to retrieve, and the number of items multiplied by the page number to skip. public int PerPage { get; set; } Property Value int"
  },
  "api/NetEnhancements.EntityFramework.Query.PagedResults-1.html": {
    "href": "api/NetEnhancements.EntityFramework.Query.PagedResults-1.html",
    "title": "Class PagedResults<T>",
    "keywords": "Class PagedResults<T> Namespace NetEnhancements.EntityFramework.Query Assembly NetEnhancements.EntityFramework.dll public record PagedResults<T> : IEquatable<PagedResults<T>> where T : class Type Parameters T Inheritance object PagedResults<T> Implements IEquatable<PagedResults<T>> Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors PagedResults(IList<T>, PagedQuery, long) public PagedResults(IList<T> items, PagedQuery pagedQuery, long totalItems = 0) Parameters items IList<T> pagedQuery PagedQuery totalItems long Properties CurrentPage public long CurrentPage { get; } Property Value long Items public IList<T> Items { get; } Property Value IList<T> ItemsPerPage public long ItemsPerPage { get; } Property Value long TotalItems public long TotalItems { get; } Property Value long TotalPages public long TotalPages { get; } Property Value long"
  },
  "api/NetEnhancements.EntityFramework.Query.QueryExpression.html": {
    "href": "api/NetEnhancements.EntityFramework.Query.QueryExpression.html",
    "title": "Class QueryExpression",
    "keywords": "Class QueryExpression Namespace NetEnhancements.EntityFramework.Query Assembly NetEnhancements.EntityFramework.dll public class QueryExpression Inheritance object QueryExpression Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors QueryExpression(string) public QueryExpression(string query) Parameters query string Properties Query public string Query { get; } Property Value string Operators implicit operator QueryExpression(string) public static implicit operator QueryExpression(string query) Parameters query string Returns QueryExpression"
  },
  "api/NetEnhancements.EntityFramework.TimeOnlyComparer.html": {
    "href": "api/NetEnhancements.EntityFramework.TimeOnlyComparer.html",
    "title": "Class TimeOnlyComparer",
    "keywords": "Class TimeOnlyComparer Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll Compares TimeOnly. public class TimeOnlyComparer : ValueComparer<TimeOnly>, IEqualityComparer, IEqualityComparer<object>, IEqualityComparer<TimeOnly> Inheritance object ValueComparer ValueComparer<TimeOnly> TimeOnlyComparer Implements IEqualityComparer IEqualityComparer<object> IEqualityComparer<TimeOnly> Inherited Members ValueComparer<TimeOnly>.CreateDefaultEqualsExpression() ValueComparer<TimeOnly>.CreateDefaultSnapshotExpression(bool) ValueComparer<TimeOnly>.CreateDefaultHashCodeExpression(bool) ValueComparer<TimeOnly>.Equals(object, object) ValueComparer<TimeOnly>.GetHashCode(object) ValueComparer<TimeOnly>.Equals(TimeOnly, TimeOnly) ValueComparer<TimeOnly>.GetHashCode(TimeOnly) ValueComparer<TimeOnly>.Snapshot(object) ValueComparer<TimeOnly>.Snapshot(TimeOnly) ValueComparer<TimeOnly>.Type ValueComparer<TimeOnly>.EqualsExpression ValueComparer<TimeOnly>.HashCodeExpression ValueComparer<TimeOnly>.SnapshotExpression ValueComparer.ExtractEqualsBody(Expression, Expression) ValueComparer.ExtractHashCodeBody(Expression) ValueComparer.ExtractSnapshotBody(Expression) ValueComparer.CreateDefault(Type, bool) Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors TimeOnlyComparer() Creates a new instance of this converter. public TimeOnlyComparer()"
  },
  "api/NetEnhancements.EntityFramework.TimeOnlyConverter.html": {
    "href": "api/NetEnhancements.EntityFramework.TimeOnlyConverter.html",
    "title": "Class TimeOnlyConverter",
    "keywords": "Class TimeOnlyConverter Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll Converts TimeOnly to nullable TimeSpan and vice versa. public class TimeOnlyConverter : ValueConverter<TimeOnly, TimeSpan> Inheritance object ValueConverter ValueConverter<TimeOnly, TimeSpan> TimeOnlyConverter Inherited Members ValueConverter<TimeOnly, TimeSpan>.ConvertToProvider ValueConverter<TimeOnly, TimeSpan>.ConvertFromProvider ValueConverter<TimeOnly, TimeSpan>.ConvertToProviderExpression ValueConverter<TimeOnly, TimeSpan>.ConvertFromProviderExpression ValueConverter<TimeOnly, TimeSpan>.ModelClrType ValueConverter<TimeOnly, TimeSpan>.ProviderClrType ValueConverter.CheckTypeSupported(Type, Type, params Type[]) ValueConverter.ComposeWith(ValueConverter) ValueConverter.ConvertToProvider ValueConverter.ConvertFromProvider ValueConverter.ConvertToProviderExpression ValueConverter.ConvertFromProviderExpression ValueConverter.ModelClrType ValueConverter.ProviderClrType ValueConverter.MappingHints ValueConverter.ConvertsNulls Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors TimeOnlyConverter() Creates a new instance of this converter. public TimeOnlyConverter()"
  },
  "api/NetEnhancements.EntityFramework.TimestampedEntityAttribute.html": {
    "href": "api/NetEnhancements.EntityFramework.TimestampedEntityAttribute.html",
    "title": "Class TimestampedEntityAttribute",
    "keywords": "Class TimestampedEntityAttribute Namespace NetEnhancements.EntityFramework Assembly NetEnhancements.EntityFramework.dll Entities annotated with this will have their [AttributeUsage(AttributeTargets.Class)] public class TimestampedEntityAttribute : Attribute Inheritance object Attribute TimestampedEntityAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>)"
  },
  "api/NetEnhancements.Identity.Configuration.html": {
    "href": "api/NetEnhancements.Identity.Configuration.html",
    "title": "Namespace NetEnhancements.Identity.Configuration",
    "keywords": "Namespace NetEnhancements.Identity.Configuration Classes IdentitySettings"
  },
  "api/NetEnhancements.Identity.Configuration.IdentitySettings.html": {
    "href": "api/NetEnhancements.Identity.Configuration.IdentitySettings.html",
    "title": "Class IdentitySettings",
    "keywords": "Class IdentitySettings Namespace NetEnhancements.Identity.Configuration Assembly NetEnhancements.Identity.dll public class IdentitySettings Inheritance object IdentitySettings Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Properties ApplicationName The name to encrypt data with. public string? ApplicationName { get; set; } Property Value string KeyFilePath Where to store key files, so we can validate cookies across app pools and recycles. public string? KeyFilePath { get; set; } Property Value string Secret The application secret, used in encryption. public string? Secret { get; set; } Property Value string TokenLifetimeSeconds Max age of a JWT. public int TokenLifetimeSeconds { get; set; } Property Value int"
  },
  "api/NetEnhancements.Identity.Data.ApplicationRole.html": {
    "href": "api/NetEnhancements.Identity.Data.ApplicationRole.html",
    "title": "Class ApplicationRole",
    "keywords": "Class ApplicationRole Namespace NetEnhancements.Identity.Data Assembly NetEnhancements.Identity.dll public class ApplicationRole : IdentityRole<Guid>, IGuidIdEntity Inheritance object IdentityRole<Guid> ApplicationRole Implements IGuidIdEntity Inherited Members IdentityRole<Guid>.ToString() IdentityRole<Guid>.Id IdentityRole<Guid>.Name IdentityRole<Guid>.NormalizedName IdentityRole<Guid>.ConcurrencyStamp Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors ApplicationRole() public ApplicationRole() ApplicationRole(string) public ApplicationRole(string roleName) Parameters roleName string Properties Users public ICollection<ApplicationUser>? Users { get; set; } Property Value ICollection<ApplicationUser>"
  },
  "api/NetEnhancements.Identity.Data.ApplicationUser.html": {
    "href": "api/NetEnhancements.Identity.Data.ApplicationUser.html",
    "title": "Class ApplicationUser",
    "keywords": "Class ApplicationUser Namespace NetEnhancements.Identity.Data Assembly NetEnhancements.Identity.dll public class ApplicationUser : IdentityUser<Guid>, IGuidIdEntity Inheritance object IdentityUser<Guid> ApplicationUser Implements IGuidIdEntity Inherited Members IdentityUser<Guid>.ToString() IdentityUser<Guid>.Id IdentityUser<Guid>.UserName IdentityUser<Guid>.NormalizedUserName IdentityUser<Guid>.Email IdentityUser<Guid>.NormalizedEmail IdentityUser<Guid>.EmailConfirmed IdentityUser<Guid>.PasswordHash IdentityUser<Guid>.SecurityStamp IdentityUser<Guid>.ConcurrencyStamp IdentityUser<Guid>.PhoneNumber IdentityUser<Guid>.PhoneNumberConfirmed IdentityUser<Guid>.TwoFactorEnabled IdentityUser<Guid>.LockoutEnd IdentityUser<Guid>.LockoutEnabled IdentityUser<Guid>.AccessFailedCount Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors ApplicationUser() public ApplicationUser() ApplicationUser(string) public ApplicationUser(string userName) Parameters userName string Properties EmailConfirmedDate public DateTimeOffset? EmailConfirmedDate { get; set; } Property Value DateTimeOffset? FirstName [StringLength(100, MinimumLength = 1)] public string? FirstName { get; set; } Property Value string LastName [StringLength(100, MinimumLength = 1)] public string? LastName { get; set; } Property Value string Registered public DateTimeOffset Registered { get; set; } Property Value DateTimeOffset Roles public ICollection<ApplicationRole>? Roles { get; set; } Property Value ICollection<ApplicationRole> Methods GetFullName() public string GetFullName() Returns string OrderClause(string) public static Expression<Func<ApplicationUser, object?>> OrderClause(string order) Parameters order string Returns Expression<Func<ApplicationUser, object>>"
  },
  "api/NetEnhancements.Identity.Data.ApplicationUserRole.html": {
    "href": "api/NetEnhancements.Identity.Data.ApplicationUserRole.html",
    "title": "Class ApplicationUserRole",
    "keywords": "Class ApplicationUserRole Namespace NetEnhancements.Identity.Data Assembly NetEnhancements.Identity.dll public class ApplicationUserRole : IdentityUserRole<Guid> Inheritance object IdentityUserRole<Guid> ApplicationUserRole Inherited Members IdentityUserRole<Guid>.UserId IdentityUserRole<Guid>.RoleId Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>)"
  },
  "api/NetEnhancements.Identity.Data.html": {
    "href": "api/NetEnhancements.Identity.Data.html",
    "title": "Namespace NetEnhancements.Identity.Data",
    "keywords": "Namespace NetEnhancements.Identity.Data Classes ApplicationRole ApplicationUser ApplicationUserRole IdentityDbContext Base class for a DbContext to be used with NetEnhancements.Identity."
  },
  "api/NetEnhancements.Identity.Data.IdentityDbContext.html": {
    "href": "api/NetEnhancements.Identity.Data.IdentityDbContext.html",
    "title": "Class IdentityDbContext",
    "keywords": "Class IdentityDbContext Namespace NetEnhancements.Identity.Data Assembly NetEnhancements.Identity.dll Base class for a DbContext to be used with NetEnhancements.Identity. public class IdentityDbContext : IdentityDbContext<ApplicationUser, ApplicationRole, Guid, IdentityUserClaim<Guid>, ApplicationUserRole, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>>, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext IdentityUserContext<ApplicationUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>> IdentityDbContext<ApplicationUser, ApplicationRole, Guid, IdentityUserClaim<Guid>, ApplicationUserRole, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>> IdentityDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members IdentityDbContext<ApplicationUser, ApplicationRole, Guid, IdentityUserClaim<Guid>, ApplicationUserRole, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>>.OnModelCreating(ModelBuilder) IdentityDbContext<ApplicationUser, ApplicationRole, Guid, IdentityUserClaim<Guid>, ApplicationUserRole, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>>.UserRoles IdentityDbContext<ApplicationUser, ApplicationRole, Guid, IdentityUserClaim<Guid>, ApplicationUserRole, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>>.Roles IdentityDbContext<ApplicationUser, ApplicationRole, Guid, IdentityUserClaim<Guid>, ApplicationUserRole, IdentityUserLogin<Guid>, IdentityRoleClaim<Guid>, IdentityUserToken<Guid>>.RoleClaims IdentityUserContext<ApplicationUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.OnModelCreating(ModelBuilder) IdentityUserContext<ApplicationUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.Users IdentityUserContext<ApplicationUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.UserClaims IdentityUserContext<ApplicationUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.UserLogins IdentityUserContext<ApplicationUser, Guid, IdentityUserClaim<Guid>, IdentityUserLogin<Guid>, IdentityUserToken<Guid>>.UserTokens DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChangesAsync(CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors IdentityDbContext(DbContextOptions) Initializes a new instance of the class. public IdentityDbContext(DbContextOptions options) Parameters options DbContextOptions The options to be used by a DbContext. Fields IdentitySchema Have Identity tables live in the Identity schema, e.g. [Identity].[Users]. public const string IdentitySchema = \"Identity\" Field Value string Methods OnModelCreating(ModelBuilder) Set up Identity tables. protected override void OnModelCreating(ModelBuilder builder) Parameters builder ModelBuilder SaveChanges(bool) TODO: does not belong here public override int SaveChanges(bool acceptAllChangesOnSuccess) Parameters acceptAllChangesOnSuccess bool Returns int SaveChangesAsync(bool, CancellationToken) TODO: does not belong here public override Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default) Parameters acceptAllChangesOnSuccess bool cancellationToken CancellationToken Returns Task<int>"
  },
  "api/NetEnhancements.Identity.DependencyInjection.html": {
    "href": "api/NetEnhancements.Identity.DependencyInjection.html",
    "title": "Class DependencyInjection",
    "keywords": "Class DependencyInjection Namespace NetEnhancements.Identity Assembly NetEnhancements.Identity.dll Dependency Injection extensions container. public static class DependencyInjection Inheritance object DependencyInjection Methods AddIdentityService<TDbContext>(IServiceCollection) Register ASP.NET Core Identity services. public static IdentityBuilder AddIdentityService<TDbContext>(this IServiceCollection services) where TDbContext : IdentityDbContext Parameters services IServiceCollection Returns IdentityBuilder Type Parameters TDbContext ConfigureAuthCookies(IdentityBuilder, IConfiguration) public static IdentityBuilder ConfigureAuthCookies(this IdentityBuilder builder, IConfiguration configuration) Parameters builder IdentityBuilder configuration IConfiguration Returns IdentityBuilder"
  },
  "api/NetEnhancements.Identity.Extensions.html": {
    "href": "api/NetEnhancements.Identity.Extensions.html",
    "title": "Namespace NetEnhancements.Identity.Extensions",
    "keywords": "Namespace NetEnhancements.Identity.Extensions Classes IdentityExtensions"
  },
  "api/NetEnhancements.Identity.Extensions.IdentityExtensions.html": {
    "href": "api/NetEnhancements.Identity.Extensions.IdentityExtensions.html",
    "title": "Class IdentityExtensions",
    "keywords": "Class IdentityExtensions Namespace NetEnhancements.Identity.Extensions Assembly NetEnhancements.Identity.dll public static class IdentityExtensions Inheritance object IdentityExtensions Methods GetClaimRoles(ClaimsPrincipal) Gets the Identity Roles for the given user, as specified in their claims. public static ICollection<string> GetClaimRoles(this ClaimsPrincipal user) Parameters user ClaimsPrincipal Returns ICollection<string> GetTokenKey(IIdentity) Gets the API key for an API call. public static string GetTokenKey(this IIdentity identity) Parameters identity IIdentity Returns string GetUserId(IIdentity?) Gets the Guid User ID for a Web user. public static Guid? GetUserId(this IIdentity? identity) Parameters identity IIdentity Returns Guid?"
  },
  "api/NetEnhancements.Identity.html": {
    "href": "api/NetEnhancements.Identity.html",
    "title": "Namespace NetEnhancements.Identity",
    "keywords": "Namespace NetEnhancements.Identity Classes DependencyInjection Dependency Injection extensions container."
  },
  "api/NetEnhancements.Identity.Managers.ApplicationUserManager.html": {
    "href": "api/NetEnhancements.Identity.Managers.ApplicationUserManager.html",
    "title": "Class ApplicationUserManager",
    "keywords": "Class ApplicationUserManager Namespace NetEnhancements.Identity.Managers Assembly NetEnhancements.Identity.dll public class ApplicationUserManager : UserManager<ApplicationUser>, IDisposable Inheritance object UserManager<ApplicationUser> ApplicationUserManager Implements IDisposable Inherited Members UserManager<ApplicationUser>.ResetPasswordTokenPurpose UserManager<ApplicationUser>.ChangePhoneNumberTokenPurpose UserManager<ApplicationUser>.ConfirmEmailTokenPurpose UserManager<ApplicationUser>.Dispose() UserManager<ApplicationUser>.GetUserName(ClaimsPrincipal) UserManager<ApplicationUser>.GetUserId(ClaimsPrincipal) UserManager<ApplicationUser>.GetUserAsync(ClaimsPrincipal) UserManager<ApplicationUser>.GenerateConcurrencyStampAsync(ApplicationUser) UserManager<ApplicationUser>.CreateAsync(ApplicationUser) UserManager<ApplicationUser>.UpdateAsync(ApplicationUser) UserManager<ApplicationUser>.DeleteAsync(ApplicationUser) UserManager<ApplicationUser>.FindByIdAsync(string) UserManager<ApplicationUser>.FindByNameAsync(string) UserManager<ApplicationUser>.CreateAsync(ApplicationUser, string) UserManager<ApplicationUser>.NormalizeName(string) UserManager<ApplicationUser>.NormalizeEmail(string) UserManager<ApplicationUser>.UpdateNormalizedUserNameAsync(ApplicationUser) UserManager<ApplicationUser>.GetUserNameAsync(ApplicationUser) UserManager<ApplicationUser>.SetUserNameAsync(ApplicationUser, string) UserManager<ApplicationUser>.GetUserIdAsync(ApplicationUser) UserManager<ApplicationUser>.CheckPasswordAsync(ApplicationUser, string) UserManager<ApplicationUser>.HasPasswordAsync(ApplicationUser) UserManager<ApplicationUser>.AddPasswordAsync(ApplicationUser, string) UserManager<ApplicationUser>.ChangePasswordAsync(ApplicationUser, string, string) UserManager<ApplicationUser>.RemovePasswordAsync(ApplicationUser) UserManager<ApplicationUser>.VerifyPasswordAsync(IUserPasswordStore<ApplicationUser>, ApplicationUser, string) UserManager<ApplicationUser>.GetSecurityStampAsync(ApplicationUser) UserManager<ApplicationUser>.UpdateSecurityStampAsync(ApplicationUser) UserManager<ApplicationUser>.GeneratePasswordResetTokenAsync(ApplicationUser) UserManager<ApplicationUser>.ResetPasswordAsync(ApplicationUser, string, string) UserManager<ApplicationUser>.FindByLoginAsync(string, string) UserManager<ApplicationUser>.RemoveLoginAsync(ApplicationUser, string, string) UserManager<ApplicationUser>.AddLoginAsync(ApplicationUser, UserLoginInfo) UserManager<ApplicationUser>.GetLoginsAsync(ApplicationUser) UserManager<ApplicationUser>.AddClaimAsync(ApplicationUser, Claim) UserManager<ApplicationUser>.AddClaimsAsync(ApplicationUser, IEnumerable<Claim>) UserManager<ApplicationUser>.ReplaceClaimAsync(ApplicationUser, Claim, Claim) UserManager<ApplicationUser>.RemoveClaimAsync(ApplicationUser, Claim) UserManager<ApplicationUser>.RemoveClaimsAsync(ApplicationUser, IEnumerable<Claim>) UserManager<ApplicationUser>.GetClaimsAsync(ApplicationUser) UserManager<ApplicationUser>.AddToRoleAsync(ApplicationUser, string) UserManager<ApplicationUser>.AddToRolesAsync(ApplicationUser, IEnumerable<string>) UserManager<ApplicationUser>.RemoveFromRoleAsync(ApplicationUser, string) UserManager<ApplicationUser>.RemoveFromRolesAsync(ApplicationUser, IEnumerable<string>) UserManager<ApplicationUser>.GetRolesAsync(ApplicationUser) UserManager<ApplicationUser>.IsInRoleAsync(ApplicationUser, string) UserManager<ApplicationUser>.GetEmailAsync(ApplicationUser) UserManager<ApplicationUser>.SetEmailAsync(ApplicationUser, string) UserManager<ApplicationUser>.FindByEmailAsync(string) UserManager<ApplicationUser>.UpdateNormalizedEmailAsync(ApplicationUser) UserManager<ApplicationUser>.GenerateEmailConfirmationTokenAsync(ApplicationUser) UserManager<ApplicationUser>.IsEmailConfirmedAsync(ApplicationUser) UserManager<ApplicationUser>.GenerateChangeEmailTokenAsync(ApplicationUser, string) UserManager<ApplicationUser>.ChangeEmailAsync(ApplicationUser, string, string) UserManager<ApplicationUser>.GetPhoneNumberAsync(ApplicationUser) UserManager<ApplicationUser>.SetPhoneNumberAsync(ApplicationUser, string) UserManager<ApplicationUser>.ChangePhoneNumberAsync(ApplicationUser, string, string) UserManager<ApplicationUser>.IsPhoneNumberConfirmedAsync(ApplicationUser) UserManager<ApplicationUser>.GenerateChangePhoneNumberTokenAsync(ApplicationUser, string) UserManager<ApplicationUser>.VerifyChangePhoneNumberTokenAsync(ApplicationUser, string, string) UserManager<ApplicationUser>.VerifyUserTokenAsync(ApplicationUser, string, string, string) UserManager<ApplicationUser>.GenerateUserTokenAsync(ApplicationUser, string, string) UserManager<ApplicationUser>.RegisterTokenProvider(string, IUserTwoFactorTokenProvider<ApplicationUser>) UserManager<ApplicationUser>.GetValidTwoFactorProvidersAsync(ApplicationUser) UserManager<ApplicationUser>.VerifyTwoFactorTokenAsync(ApplicationUser, string, string) UserManager<ApplicationUser>.GenerateTwoFactorTokenAsync(ApplicationUser, string) UserManager<ApplicationUser>.GetTwoFactorEnabledAsync(ApplicationUser) UserManager<ApplicationUser>.SetTwoFactorEnabledAsync(ApplicationUser, bool) UserManager<ApplicationUser>.IsLockedOutAsync(ApplicationUser) UserManager<ApplicationUser>.SetLockoutEnabledAsync(ApplicationUser, bool) UserManager<ApplicationUser>.GetLockoutEnabledAsync(ApplicationUser) UserManager<ApplicationUser>.GetLockoutEndDateAsync(ApplicationUser) UserManager<ApplicationUser>.SetLockoutEndDateAsync(ApplicationUser, DateTimeOffset?) UserManager<ApplicationUser>.AccessFailedAsync(ApplicationUser) UserManager<ApplicationUser>.ResetAccessFailedCountAsync(ApplicationUser) UserManager<ApplicationUser>.GetAccessFailedCountAsync(ApplicationUser) UserManager<ApplicationUser>.GetUsersForClaimAsync(Claim) UserManager<ApplicationUser>.GetUsersInRoleAsync(string) UserManager<ApplicationUser>.GetAuthenticationTokenAsync(ApplicationUser, string, string) UserManager<ApplicationUser>.SetAuthenticationTokenAsync(ApplicationUser, string, string, string) UserManager<ApplicationUser>.RemoveAuthenticationTokenAsync(ApplicationUser, string, string) UserManager<ApplicationUser>.GetAuthenticatorKeyAsync(ApplicationUser) UserManager<ApplicationUser>.ResetAuthenticatorKeyAsync(ApplicationUser) UserManager<ApplicationUser>.GenerateNewAuthenticatorKey() UserManager<ApplicationUser>.GenerateNewTwoFactorRecoveryCodesAsync(ApplicationUser, int) UserManager<ApplicationUser>.CreateTwoFactorRecoveryCode() UserManager<ApplicationUser>.RedeemTwoFactorRecoveryCodeAsync(ApplicationUser, string) UserManager<ApplicationUser>.CountRecoveryCodesAsync(ApplicationUser) UserManager<ApplicationUser>.Dispose(bool) UserManager<ApplicationUser>.CreateSecurityTokenAsync(ApplicationUser) UserManager<ApplicationUser>.UpdatePasswordHash(ApplicationUser, string, bool) UserManager<ApplicationUser>.GetChangeEmailTokenPurpose(string) UserManager<ApplicationUser>.ValidateUserAsync(ApplicationUser) UserManager<ApplicationUser>.ValidatePasswordAsync(ApplicationUser, string) UserManager<ApplicationUser>.UpdateUserAsync(ApplicationUser) UserManager<ApplicationUser>.ThrowIfDisposed() UserManager<ApplicationUser>.CancellationToken UserManager<ApplicationUser>.Store UserManager<ApplicationUser>.Logger UserManager<ApplicationUser>.PasswordHasher UserManager<ApplicationUser>.UserValidators UserManager<ApplicationUser>.PasswordValidators UserManager<ApplicationUser>.KeyNormalizer UserManager<ApplicationUser>.ErrorDescriber UserManager<ApplicationUser>.Options UserManager<ApplicationUser>.SupportsUserAuthenticationTokens UserManager<ApplicationUser>.SupportsUserAuthenticatorKey UserManager<ApplicationUser>.SupportsUserTwoFactorRecoveryCodes UserManager<ApplicationUser>.SupportsUserTwoFactor UserManager<ApplicationUser>.SupportsUserPassword UserManager<ApplicationUser>.SupportsUserSecurityStamp UserManager<ApplicationUser>.SupportsUserRole UserManager<ApplicationUser>.SupportsUserLogin UserManager<ApplicationUser>.SupportsUserEmail UserManager<ApplicationUser>.SupportsUserPhoneNumber UserManager<ApplicationUser>.SupportsUserClaim UserManager<ApplicationUser>.SupportsUserLockout UserManager<ApplicationUser>.SupportsQueryableUsers UserManager<ApplicationUser>.Users Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors ApplicationUserManager(IdentityDbContext, RoleManager<ApplicationRole>, IUserStore<ApplicationUser>, IOptions<IdentityOptions>, IPasswordHasher<ApplicationUser>, IEnumerable<IUserValidator<ApplicationUser>>, IEnumerable<IPasswordValidator<ApplicationUser>>, ILookupNormalizer, IdentityErrorDescriber, IServiceProvider, ILogger<UserManager<ApplicationUser>>) public ApplicationUserManager(IdentityDbContext dbContext, RoleManager<ApplicationRole> roleManager, IUserStore<ApplicationUser> store, IOptions<IdentityOptions> optionsAccessor, IPasswordHasher<ApplicationUser> passwordHasher, IEnumerable<IUserValidator<ApplicationUser>> userValidators, IEnumerable<IPasswordValidator<ApplicationUser>> passwordValidators, ILookupNormalizer keyNormalizer, IdentityErrorDescriber errors, IServiceProvider services, ILogger<UserManager<ApplicationUser>> logger) Parameters dbContext IdentityDbContext roleManager RoleManager<ApplicationRole> store IUserStore<ApplicationUser> optionsAccessor IOptions<IdentityOptions> passwordHasher IPasswordHasher<ApplicationUser> userValidators IEnumerable<IUserValidator<ApplicationUser>> passwordValidators IEnumerable<IPasswordValidator<ApplicationUser>> keyNormalizer ILookupNormalizer errors IdentityErrorDescriber services IServiceProvider logger ILogger<UserManager<ApplicationUser>> Methods ConfirmEmailAsync(ApplicationUser, string) public override Task<IdentityResult> ConfirmEmailAsync(ApplicationUser user, string token) Parameters user ApplicationUser token string Returns Task<IdentityResult> FindAllUsersAsync(DataQuery, bool) public Task<PagedResults<ApplicationUser>> FindAllUsersAsync(DataQuery query, bool includeRoles = false) Parameters query DataQuery includeRoles bool Returns Task<PagedResults<ApplicationUser>> FindByIdAsync(Guid?, bool) public Task<ApplicationUser?> FindByIdAsync(Guid? userId, bool includeRoles = false) Parameters userId Guid? includeRoles bool Returns Task<ApplicationUser> GetAllRolesAsync() Returns all roles known to the storage. public Task<List<ApplicationRole>> GetAllRolesAsync() Returns Task<List<ApplicationRole>> IncrementFailedAccessCountAsync(ApplicationUser) public Task IncrementFailedAccessCountAsync(ApplicationUser user) Parameters user ApplicationUser Returns Task IsInRoleAsync(Guid?, string) public Task<bool> IsInRoleAsync(Guid? userId, string role) Parameters userId Guid? role string Returns Task<bool> UpdateEmailAsync(ApplicationUser, string) Updates the email address (and therefore username) for the given user. public Task<IdentityResult> UpdateEmailAsync(ApplicationUser user, string newEmail) Parameters user ApplicationUser newEmail string Returns Task<IdentityResult> UpdateNameAsync(ApplicationUser, string, string) Change the first and last name for the given user. public Task<IdentityResult> UpdateNameAsync(ApplicationUser user, string firstName, string lastName) Parameters user ApplicationUser firstName string lastName string Returns Task<IdentityResult>"
  },
  "api/NetEnhancements.Identity.Managers.html": {
    "href": "api/NetEnhancements.Identity.Managers.html",
    "title": "Namespace NetEnhancements.Identity.Managers",
    "keywords": "Namespace NetEnhancements.Identity.Managers Classes ApplicationUserManager"
  },
  "api/NetEnhancements.Imaging.DependencyInjection.html": {
    "href": "api/NetEnhancements.Imaging.DependencyInjection.html",
    "title": "Class DependencyInjection",
    "keywords": "Class DependencyInjection Namespace NetEnhancements.Imaging Assembly NetEnhancements.Imaging.dll Dependency Injection extensions container. public static class DependencyInjection Inheritance object DependencyInjection Methods AddDiskStore(ImagingBuilder) Add disk storage to an ImagingBuilder. public static ImagingBuilder AddDiskStore(this ImagingBuilder builder) Parameters builder ImagingBuilder Returns ImagingBuilder AddImaging(IServiceCollection) Register the services necessary for image inspection and manipulation. public static ImagingBuilder AddImaging(this IServiceCollection services) Parameters services IServiceCollection Returns ImagingBuilder"
  },
  "api/NetEnhancements.Imaging.EntityFramework.Category.html": {
    "href": "api/NetEnhancements.Imaging.EntityFramework.Category.html",
    "title": "Class Category",
    "keywords": "Class Category Namespace NetEnhancements.Imaging.EntityFramework Assembly NetEnhancements.Imaging.EntityFramework.dll public class Category : CategoryBase, ITimestampedEntity Inheritance object Entity IntIdEntity CategoryBase Category Implements ITimestampedEntity Inherited Members CategoryBase.Name IntIdEntity.Id Entity.Created Entity.Modified Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>)"
  },
  "api/NetEnhancements.Imaging.EntityFramework.CategoryBase.html": {
    "href": "api/NetEnhancements.Imaging.EntityFramework.CategoryBase.html",
    "title": "Class CategoryBase",
    "keywords": "Class CategoryBase Namespace NetEnhancements.Imaging.EntityFramework Assembly NetEnhancements.Imaging.EntityFramework.dll [Index(\"Name\", new string[] { }, IsUnique = true)] public abstract class CategoryBase : IntIdEntity, ITimestampedEntity Inheritance object Entity IntIdEntity CategoryBase Implements ITimestampedEntity Derived Category Inherited Members IntIdEntity.Id Entity.Created Entity.Modified Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Properties Name [Required] [StringLength(16, MinimumLength = 1)] public string? Name { get; set; } Property Value string"
  },
  "api/NetEnhancements.Imaging.EntityFramework.html": {
    "href": "api/NetEnhancements.Imaging.EntityFramework.html",
    "title": "Namespace NetEnhancements.Imaging.EntityFramework",
    "keywords": "Namespace NetEnhancements.Imaging.EntityFramework Classes Category CategoryBase Image Default class for storing image metadata. ImageBase<TCategory> Base class for storing image metadata. ImageCategory ImageCategoryBase Junction table: relation between images and categories. ModelBuilderExtensions"
  },
  "api/NetEnhancements.Imaging.EntityFramework.Image.html": {
    "href": "api/NetEnhancements.Imaging.EntityFramework.Image.html",
    "title": "Class Image",
    "keywords": "Class Image Namespace NetEnhancements.Imaging.EntityFramework Assembly NetEnhancements.Imaging.EntityFramework.dll Default class for storing image metadata. public class Image : ImageBase<Category>, ITimestampedEntity, IGuidIdEntity Inheritance object Entity GuidIdEntity ImageBase<Category> Image Implements ITimestampedEntity IGuidIdEntity Inherited Members ImageBase<Category>.Name ImageBase<Category>.ContentType ImageBase<Category>.Categories GuidIdEntity.Id Entity.Created Entity.Modified Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>)"
  },
  "api/NetEnhancements.Imaging.EntityFramework.ImageBase-1.html": {
    "href": "api/NetEnhancements.Imaging.EntityFramework.ImageBase-1.html",
    "title": "Class ImageBase<TCategory>",
    "keywords": "Class ImageBase<TCategory> Namespace NetEnhancements.Imaging.EntityFramework Assembly NetEnhancements.Imaging.EntityFramework.dll Base class for storing image metadata. [Index(\"Name\", new string[] { }, IsUnique = true)] public abstract class ImageBase<TCategory> : GuidIdEntity, ITimestampedEntity, IGuidIdEntity where TCategory : CategoryBase Type Parameters TCategory Inheritance object Entity GuidIdEntity ImageBase<TCategory> Implements ITimestampedEntity IGuidIdEntity Derived Image Inherited Members GuidIdEntity.Id Entity.Created Entity.Modified Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Properties Categories public virtual ICollection<TCategory>? Categories { get; set; } Property Value ICollection<TCategory> ContentType [Required] [StringLength(16, MinimumLength = 1)] public string? ContentType { get; set; } Property Value string Name [Required] [StringLength(64, MinimumLength = 1)] public string? Name { get; set; } Property Value string"
  },
  "api/NetEnhancements.Imaging.EntityFramework.ImageCategory.html": {
    "href": "api/NetEnhancements.Imaging.EntityFramework.ImageCategory.html",
    "title": "Class ImageCategory",
    "keywords": "Class ImageCategory Namespace NetEnhancements.Imaging.EntityFramework Assembly NetEnhancements.Imaging.EntityFramework.dll public class ImageCategory : ImageCategoryBase Inheritance object ImageCategoryBase ImageCategory Inherited Members ImageCategoryBase.ImageId ImageCategoryBase.CategoryId Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>)"
  },
  "api/NetEnhancements.Imaging.EntityFramework.ImageCategoryBase.html": {
    "href": "api/NetEnhancements.Imaging.EntityFramework.ImageCategoryBase.html",
    "title": "Class ImageCategoryBase",
    "keywords": "Class ImageCategoryBase Namespace NetEnhancements.Imaging.EntityFramework Assembly NetEnhancements.Imaging.EntityFramework.dll Junction table: relation between images and categories. public abstract class ImageCategoryBase Inheritance object ImageCategoryBase Derived ImageCategory Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Properties CategoryId public int CategoryId { get; set; } Property Value int ImageId public Guid ImageId { get; set; } Property Value Guid"
  },
  "api/NetEnhancements.Imaging.EntityFramework.ModelBuilderExtensions.html": {
    "href": "api/NetEnhancements.Imaging.EntityFramework.ModelBuilderExtensions.html",
    "title": "Class ModelBuilderExtensions",
    "keywords": "Class ModelBuilderExtensions Namespace NetEnhancements.Imaging.EntityFramework Assembly NetEnhancements.Imaging.EntityFramework.dll public static class ModelBuilderExtensions Inheritance object ModelBuilderExtensions Fields DefaultCategoriesTableName public const string DefaultCategoriesTableName = \"ImageCategories\" Field Value string DefaultImageCategoriesTableName public const string DefaultImageCategoriesTableName = \"ImageCategoryImages\" Field Value string DefaultImageTableName public const string DefaultImageTableName = \"Images\" Field Value string Methods UseImaging(ModelBuilder, string?, string?, string?) Adds the Imaging data store using the default entities and default or specified table names. public static ModelBuilder UseImaging(this ModelBuilder modelBuilder, string? imageTableName = null, string? categoryTableName = null, string? imageCategoryTableName = null) Parameters modelBuilder ModelBuilder imageTableName string categoryTableName string imageCategoryTableName string Returns ModelBuilder UseImaging<TImage>(ModelBuilder, string?, string?, string?) Adds the Imaging data store using the specified image type and otherwise default entities and default or specified table names. public static ModelBuilder UseImaging<TImage>(this ModelBuilder modelBuilder, string? imageTableName = null, string? categoryTableName = null, string? imageCategoryTableName = null) where TImage : ImageBase<Category> Parameters modelBuilder ModelBuilder imageTableName string categoryTableName string imageCategoryTableName string Returns ModelBuilder Type Parameters TImage UseImaging<TImage, TCategory>(ModelBuilder, string?, string?, string?) Adds the Imaging data store using the specified TImage and TCategory and otherwise default entities and default or specified table names. public static ModelBuilder UseImaging<TImage, TCategory>(this ModelBuilder modelBuilder, string? imageTableName = null, string? categoryTableName = null, string? imageCategoryTableName = null) where TImage : ImageBase<TCategory> where TCategory : CategoryBase Parameters modelBuilder ModelBuilder imageTableName string categoryTableName string imageCategoryTableName string Returns ModelBuilder Type Parameters TImage TCategory UseImaging<TImage, TCategory, TImageCategory>(ModelBuilder, string?, string?, string?) Adds the Imaging data store using the specified TImage, TCategory and TImageCategory and default or specified table names. public static ModelBuilder UseImaging<TImage, TCategory, TImageCategory>(this ModelBuilder modelBuilder, string? imageTableName = null, string? categoryTableName = null, string? imageCategoryTableName = null) where TImage : ImageBase<TCategory> where TCategory : CategoryBase where TImageCategory : ImageCategoryBase Parameters modelBuilder ModelBuilder imageTableName string categoryTableName string imageCategoryTableName string Returns ModelBuilder Type Parameters TImage TCategory TImageCategory"
  },
  "api/NetEnhancements.Imaging.html": {
    "href": "api/NetEnhancements.Imaging.html",
    "title": "Namespace NetEnhancements.Imaging",
    "keywords": "Namespace NetEnhancements.Imaging Classes DependencyInjection Dependency Injection extensions container. ImageInfo Image characteristics ImagingBuilder Imaging-specific Dependency Injection Builder. Resolution Width and height of media. SizeCalculator Calculates image sizes. Interfaces IImageInspector Retrieve image information. IImageProcessor Contains methods for image manipulation. TODO: move logic from SaveResizedAsync(Stream, string, string, string, Resolution) to here. IImageStore Image storage abstraction layer."
  },
  "api/NetEnhancements.Imaging.IImageInspector.html": {
    "href": "api/NetEnhancements.Imaging.IImageInspector.html",
    "title": "Interface IImageInspector",
    "keywords": "Interface IImageInspector Namespace NetEnhancements.Imaging Assembly NetEnhancements.Imaging.dll Retrieve image information. public interface IImageInspector Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Methods GetImageInfoAsync(Stream) Returns format and dimensions of the image contained within the stream, or null if it can't be determined. Task<ImageInfo?> GetImageInfoAsync(Stream imageData) Parameters imageData Stream Returns Task<ImageInfo>"
  },
  "api/NetEnhancements.Imaging.IImageProcessor.html": {
    "href": "api/NetEnhancements.Imaging.IImageProcessor.html",
    "title": "Interface IImageProcessor",
    "keywords": "Interface IImageProcessor Namespace NetEnhancements.Imaging Assembly NetEnhancements.Imaging.dll Contains methods for image manipulation. TODO: move logic from SaveResizedAsync(Stream, string, string, string, Resolution) to here. public interface IImageProcessor Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>)"
  },
  "api/NetEnhancements.Imaging.IImageStore.html": {
    "href": "api/NetEnhancements.Imaging.IImageStore.html",
    "title": "Interface IImageStore",
    "keywords": "Interface IImageStore Namespace NetEnhancements.Imaging Assembly NetEnhancements.Imaging.dll Image storage abstraction layer. public interface IImageStore Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Methods DeleteAsync(string, string, string, ICollection<Resolution>?, bool) Deletes an original image, and the specified resized ones (sizesToRemove). When moveToTrash is true, the original will be moved to a location from where it can be (manually) restored. Task DeleteAsync(string locationIdentifier, string imageIdentifier, string extension, ICollection<Resolution>? sizesToRemove = null, bool moveToTrash = true) Parameters locationIdentifier string imageIdentifier string extension string sizesToRemove ICollection<Resolution> moveToTrash bool Returns Task OpenStreamAsync(string, string, string, Resolution?) Opens a stream to the source image. For the original, don't pass a resolution. Task<Stream> OpenStreamAsync(string locationIdentifier, string imageIdentifier, string extension, Resolution? resolution) Parameters locationIdentifier string imageIdentifier string extension string resolution Resolution Returns Task<Stream> SaveOriginalAsync(Stream, string, string, string) Saves the original version of an image. Task SaveOriginalAsync(Stream imageStream, string locationIdentifier, string imageIdentifier, string extension) Parameters imageStream Stream locationIdentifier string imageIdentifier string extension string Returns Task SaveResizedAsync(Stream, string, string, string, Resolution) Saves resized version of an original image. Task SaveResizedAsync(Stream imageStream, string locationIdentifier, string imageIdentifier, string extension, Resolution resolution) Parameters imageStream Stream locationIdentifier string imageIdentifier string extension string resolution Resolution Returns Task"
  },
  "api/NetEnhancements.Imaging.ImageInfo.html": {
    "href": "api/NetEnhancements.Imaging.ImageInfo.html",
    "title": "Class ImageInfo",
    "keywords": "Class ImageInfo Namespace NetEnhancements.Imaging Assembly NetEnhancements.Imaging.dll Image characteristics public record ImageInfo : Resolution, IEquatable<Resolution>, IEquatable<ImageInfo> Inheritance object Resolution ImageInfo Implements IEquatable<Resolution> IEquatable<ImageInfo> Inherited Members Resolution.Width Resolution.Height Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors ImageInfo(string, int, int) Image characteristics public ImageInfo(string Format, int Width, int Height) Parameters Format string Width int Height int Properties Format public string Format { get; init; } Property Value string"
  },
  "api/NetEnhancements.Imaging.ImagingBuilder.html": {
    "href": "api/NetEnhancements.Imaging.ImagingBuilder.html",
    "title": "Class ImagingBuilder",
    "keywords": "Class ImagingBuilder Namespace NetEnhancements.Imaging Assembly NetEnhancements.Imaging.dll Imaging-specific Dependency Injection Builder. public class ImagingBuilder Inheritance object ImagingBuilder Extension Methods DependencyInjection.AddDiskStore(ImagingBuilder) CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Properties Services The service collection to add additional services to. public IServiceCollection Services { get; } Property Value IServiceCollection"
  },
  "api/NetEnhancements.Imaging.Resolution.html": {
    "href": "api/NetEnhancements.Imaging.Resolution.html",
    "title": "Class Resolution",
    "keywords": "Class Resolution Namespace NetEnhancements.Imaging Assembly NetEnhancements.Imaging.dll Width and height of media. public record Resolution : IEquatable<Resolution> Inheritance object Resolution Implements IEquatable<Resolution> Derived ImageInfo Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors Resolution(int, int) Width and height of media. public Resolution(int Width, int Height) Parameters Width int Height int Properties Height public int Height { get; init; } Property Value int Width public int Width { get; init; } Property Value int"
  },
  "api/NetEnhancements.Imaging.SizeCalculator.html": {
    "href": "api/NetEnhancements.Imaging.SizeCalculator.html",
    "title": "Class SizeCalculator",
    "keywords": "Class SizeCalculator Namespace NetEnhancements.Imaging Assembly NetEnhancements.Imaging.dll Calculates image sizes. public static class SizeCalculator Inheritance object SizeCalculator Methods GetRelativeSize(Resolution, Resolution) Returns the optimal new resolution given an originalResolution and a desiredResolution. public static Resolution GetRelativeSize(Resolution originalResolution, Resolution desiredResolution) Parameters originalResolution Resolution desiredResolution Resolution Returns Resolution"
  },
  "api/NetEnhancements.OAuth.html": {
    "href": "api/NetEnhancements.OAuth.html",
    "title": "Namespace NetEnhancements.OAuth",
    "keywords": "Namespace NetEnhancements.OAuth Classes TokenGenerator Used for API tokens."
  },
  "api/NetEnhancements.OAuth.TokenGenerator.html": {
    "href": "api/NetEnhancements.OAuth.TokenGenerator.html",
    "title": "Class TokenGenerator",
    "keywords": "Class TokenGenerator Namespace NetEnhancements.OAuth Assembly NetEnhancements.OAuth.dll Used for API tokens. public static class TokenGenerator Inheritance object TokenGenerator Methods GetRandomHashedKeyAndSecret() public static (string Key, string Secret, string Hashed) GetRandomHashedKeyAndSecret() Returns (string Key, string Secret, string Hashed) Match(string?, string?, string) public static bool Match(string? key, string? secret, string hash) Parameters key string secret string hash string Returns bool"
  },
  "api/NetEnhancements.Services.html": {
    "href": "api/NetEnhancements.Services.html",
    "title": "Namespace NetEnhancements.Services",
    "keywords": "Namespace NetEnhancements.Services Classes ScheduledBackgroundService A BackgroundService that calls ExecuteScheduledTaskAsync(IServiceProvider, CancellationToken) based on the CronSchedule."
  },
  "api/NetEnhancements.Services.ScheduledBackgroundService.html": {
    "href": "api/NetEnhancements.Services.ScheduledBackgroundService.html",
    "title": "Class ScheduledBackgroundService",
    "keywords": "Class ScheduledBackgroundService Namespace NetEnhancements.Services Assembly NetEnhancements.Services.dll A BackgroundService that calls ExecuteScheduledTaskAsync(IServiceProvider, CancellationToken) based on the CronSchedule. public abstract class ScheduledBackgroundService : BackgroundService, IHostedService, IDisposable Inheritance object BackgroundService ScheduledBackgroundService Implements IHostedService IDisposable Inherited Members BackgroundService.StartAsync(CancellationToken) BackgroundService.StopAsync(CancellationToken) BackgroundService.Dispose() BackgroundService.ExecuteTask Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors ScheduledBackgroundService(ILogger<ScheduledBackgroundService>, IServiceProvider) Insantiates the service. protected ScheduledBackgroundService(ILogger<ScheduledBackgroundService> logger, IServiceProvider services) Parameters logger ILogger<ScheduledBackgroundService> services IServiceProvider Fields Logger protected readonly ILogger<ScheduledBackgroundService> Logger Field Value ILogger<ScheduledBackgroundService> Properties CronSchedule protected abstract string CronSchedule { get; } Property Value string Methods ExecuteAsync(CancellationToken) protected override sealed Task ExecuteAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken Returns Task ExecuteScheduledTaskAsync(IServiceProvider, CancellationToken) Implement this method instead of ExecuteAsync(CancellationToken) to do your work. protected abstract Task ExecuteScheduledTaskAsync(IServiceProvider serviceProvider, CancellationToken stoppingToken) Parameters serviceProvider IServiceProvider stoppingToken CancellationToken Returns Task"
  },
  "api/NetEnhancements.Shared.AppStatus.ApplicationStatus.html": {
    "href": "api/NetEnhancements.Shared.AppStatus.ApplicationStatus.html",
    "title": "Class ApplicationStatus",
    "keywords": "Class ApplicationStatus Namespace NetEnhancements.Shared.AppStatus Assembly NetEnhancements.Shared.dll Represents the status of a deployed application. public class ApplicationStatus Inheritance object ApplicationStatus Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors ApplicationStatus(string, string, string) Construct the status with the required properties. public ApplicationStatus(string assemblyName, string assemblyVersion, string environmentName) Parameters assemblyName string assemblyVersion string environmentName string Properties AssemblyLastWrite When the main application assembly was last written. [Display(Name = \"Last written\")] public DateTime? AssemblyLastWrite { get; set; } Property Value DateTime? AssemblyLocation Where the main application assembly lives. [Display(Name = \"Location\")] public string? AssemblyLocation { get; set; } Property Value string AssemblyName The main application assembly name. [Display(Name = \"Assembly\")] public string AssemblyName { get; set; } Property Value string AssemblyVersion The main application assembly version. [Display(Name = \"Version\")] public string AssemblyVersion { get; set; } Property Value string Hostname The machine name on which the application is running. [Display(Name = \"Hostname\")] public string? Hostname { get; set; } Property Value string NetCoreHostingEnvironment The application's runtime configuration. [JsonPropertyName(\"environment\")] [Display(Name = \".NET Core environment\")] public string NetCoreHostingEnvironment { get; set; } Property Value string"
  },
  "api/NetEnhancements.Shared.AppStatus.ApplicationStatusBuilder.html": {
    "href": "api/NetEnhancements.Shared.AppStatus.ApplicationStatusBuilder.html",
    "title": "Class ApplicationStatusBuilder",
    "keywords": "Class ApplicationStatusBuilder Namespace NetEnhancements.Shared.AppStatus Assembly NetEnhancements.Shared.dll Reads application (main assembly) information. public static class ApplicationStatusBuilder Inheritance object ApplicationStatusBuilder Methods FromHostedAssembly(IHostEnvironment, bool) Returns host and version information about the executed assembly. public static ApplicationStatus FromHostedAssembly(IHostEnvironment hostingEnvironment, bool includingSensitiveData = false) Parameters hostingEnvironment IHostEnvironment includingSensitiveData bool Returns ApplicationStatus GetBuildDateTime(Assembly?) Returns when an assembly was last written. public static DateTime GetBuildDateTime(Assembly? assembly = null) Parameters assembly Assembly Returns DateTime"
  },
  "api/NetEnhancements.Shared.AppStatus.html": {
    "href": "api/NetEnhancements.Shared.AppStatus.html",
    "title": "Namespace NetEnhancements.Shared.AppStatus",
    "keywords": "Namespace NetEnhancements.Shared.AppStatus Classes ApplicationStatus Represents the status of a deployed application. ApplicationStatusBuilder Reads application (main assembly) information."
  },
  "api/NetEnhancements.Shared.Configuration.ConfigurationException.html": {
    "href": "api/NetEnhancements.Shared.Configuration.ConfigurationException.html",
    "title": "Class ConfigurationException",
    "keywords": "Class ConfigurationException Namespace NetEnhancements.Shared.Configuration Assembly NetEnhancements.Shared.dll Indicates that the configuration cannot be parsed or contains invalid values. public class ConfigurationException : Exception, ISerializable Inheritance object Exception ConfigurationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors ConfigurationException(string?, Exception?) Manually construct the exception. Consider using one of the static methods instead. public ConfigurationException(string? message = null, Exception? innerException = null) Parameters message string innerException Exception Methods DefaultValue<TSettings>(string, object) Indicates that the given member for the given settings class contains a default value in the configuration. public static ConfigurationException DefaultValue<TSettings>(string memberName, object value) where TSettings : class Parameters memberName string value object Returns ConfigurationException Type Parameters TSettings EmptyString<TSettings>(string) Indicates that the given member for the given settings class contains an empty value in the configuration. public static ConfigurationException EmptyString<TSettings>(string memberName) where TSettings : class Parameters memberName string Returns ConfigurationException Type Parameters TSettings MissingSection<TSettings>() Indicates that a configuration is missing the section for the given settings class. public static ConfigurationException MissingSection<TSettings>() where TSettings : class Returns ConfigurationException Type Parameters TSettings"
  },
  "api/NetEnhancements.Shared.Configuration.ConfigurationExtensions.html": {
    "href": "api/NetEnhancements.Shared.Configuration.ConfigurationExtensions.html",
    "title": "Class ConfigurationExtensions",
    "keywords": "Class ConfigurationExtensions Namespace NetEnhancements.Shared.Configuration Assembly NetEnhancements.Shared.dll Extension method container for configuration. public static class ConfigurationExtensions Inheritance object ConfigurationExtensions Methods GetSectionName<T>() Returns the name of the type, with the suffix \"Settings\" removed if present. public static string GetSectionName<T>() Returns string Type Parameters T GetSectionOrThrow<TSettings>(IConfiguration, string?) Get a TSettings from an equally-named section in the appsettings, and the section so caller can register it for IOptions<TOptions>. sectionName is implied from the name of TSettings, with the suffix \"Settings\" removed, if present. public static (IConfigurationSection, TSettings) GetSectionOrThrow<TSettings>(this IConfiguration configuration, string? sectionName = null) where TSettings : class Parameters configuration IConfiguration sectionName string Returns (IConfigurationSection, TSettings) Type Parameters TSettings ValidateByDataAnnotation<TSettings>(TSettings, string) Validates a settings instance by its annotations, throws if invalid. public static void ValidateByDataAnnotation<TSettings>(TSettings instance, string sectionName) where TSettings : class Parameters instance TSettings sectionName string Type Parameters TSettings"
  },
  "api/NetEnhancements.Shared.Configuration.DependencyInjection.html": {
    "href": "api/NetEnhancements.Shared.Configuration.DependencyInjection.html",
    "title": "Class DependencyInjection",
    "keywords": "Class DependencyInjection Namespace NetEnhancements.Shared.Configuration Assembly NetEnhancements.Shared.dll Dependency Injection extensions container. public static class DependencyInjection Inheritance object DependencyInjection Methods RegisterSettings<TSettings>(IServiceCollection, IConfiguration, string?, bool) Reads, registers (optionally and by default as IOptions<TOptions>) and returns a TSettings instance, read from configuration. Throws if the section is missing or if it contains invalid data according to its data annotations. public static TSettings RegisterSettings<TSettings>(this IServiceCollection services, IConfiguration configuration, string? sectionName = null, bool registerIOptions = true) where TSettings : class Parameters services IServiceCollection configuration IConfiguration sectionName string registerIOptions bool Returns TSettings Type Parameters TSettings"
  },
  "api/NetEnhancements.Shared.Configuration.html": {
    "href": "api/NetEnhancements.Shared.Configuration.html",
    "title": "Namespace NetEnhancements.Shared.Configuration",
    "keywords": "Namespace NetEnhancements.Shared.Configuration Classes ConfigurationException Indicates that the configuration cannot be parsed or contains invalid values. ConfigurationExtensions Extension method container for configuration. DependencyInjection Dependency Injection extensions container. LoggingSettings We need this class to read MS's Logging config, to be able to inject it."
  },
  "api/NetEnhancements.Shared.Configuration.LoggingSettings.html": {
    "href": "api/NetEnhancements.Shared.Configuration.LoggingSettings.html",
    "title": "Class LoggingSettings",
    "keywords": "Class LoggingSettings Namespace NetEnhancements.Shared.Configuration Assembly NetEnhancements.Shared.dll We need this class to read MS's Logging config, to be able to inject it. public class LoggingSettings Inheritance object LoggingSettings Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Fields Log4NetSectionName public const string Log4NetSectionName = \"Log4Net\" Field Value string"
  },
  "api/NetEnhancements.Shared.Logging.DependencyInjection.html": {
    "href": "api/NetEnhancements.Shared.Logging.DependencyInjection.html",
    "title": "Class DependencyInjection",
    "keywords": "Class DependencyInjection Namespace NetEnhancements.Shared.Logging Assembly NetEnhancements.Shared.dll Dependency Injection extensions container. public static class DependencyInjection Inheritance object DependencyInjection Methods AddLogging(IServiceCollection, IConfiguration) Configures Log4Net, Console and Debug logging. https://github.com/huorswords/Microsoft.Extensions.Logging.Log4Net.AspNetCore public static void AddLogging(this IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration"
  },
  "api/NetEnhancements.Shared.Logging.html": {
    "href": "api/NetEnhancements.Shared.Logging.html",
    "title": "Namespace NetEnhancements.Shared.Logging",
    "keywords": "Namespace NetEnhancements.Shared.Logging Classes DependencyInjection Dependency Injection extensions container."
  },
  "api/NetEnhancements.Util.AttributeValidator.html": {
    "href": "api/NetEnhancements.Util.AttributeValidator.html",
    "title": "Class AttributeValidator",
    "keywords": "Class AttributeValidator Namespace NetEnhancements.Util Assembly NetEnhancements.Util.dll Wraps TryValidateObject(object, ValidationContext, ICollection<ValidationResult>, bool) into an easier-to-use method. public static class AttributeValidator Inheritance object AttributeValidator Methods Validate<T>(T) Validates an object according to its attributes. public static (bool IsValid, List<ValidationResult> ValidationResults) Validate<T>(T instance) where T : class Parameters instance T Returns (bool IsValid, List<ValidationResult> ValidationResults) Type Parameters T"
  },
  "api/NetEnhancements.Util.CollectionExtensions.html": {
    "href": "api/NetEnhancements.Util.CollectionExtensions.html",
    "title": "Class CollectionExtensions",
    "keywords": "Class CollectionExtensions Namespace NetEnhancements.Util Assembly NetEnhancements.Util.dll Provides extension methods for collections. public static class CollectionExtensions Inheritance object CollectionExtensions Methods GetPermutations<T>(IReadOnlyCollection<T>, int) Generates all permutations of a given length from the specified list. public static IEnumerable<IEnumerable<T>> GetPermutations<T>(this IReadOnlyCollection<T> list, int length) Parameters list IReadOnlyCollection<T> The input list to generate permutations from. length int The length of the permutations to generate. Returns IEnumerable<IEnumerable<T>> An enumerable of permutations, where each permutation is an enumerable of the same type as the input list. Type Parameters T The type of the elements in the list. Exceptions ArgumentOutOfRangeException Thrown when the length is greater than the number of elements in the list. GetPermutations<T>(IReadOnlyCollection<T>) Generates all permutations from the specified list. public static IEnumerable<IEnumerable<T>> GetPermutations<T>(this IReadOnlyCollection<T> list) Parameters list IReadOnlyCollection<T> The input list to generate permutations from. Returns IEnumerable<IEnumerable<T>> An enumerable of permutations, where each permutation is an enumerable of the same type as the input list. Type Parameters T The type of the elements in the list. In<T>(T?, params T[]) Returns whether value is in matchingValues. public static bool In<T>(this T? value, params T[] matchingValues) Parameters value T matchingValues T[] Returns bool Type Parameters T In<T>(T?, IEnumerable<T>) Returns whether value is in matchingValues. public static bool In<T>(this T? value, IEnumerable<T> matchingValues) Parameters value T matchingValues IEnumerable<T> Returns bool Type Parameters T Random<T>(IReadOnlyCollection<T>, Random) Takes one random element from the collection using the provided Random<T>(IReadOnlyCollection<T>, Random) instance. public static T Random<T>(this IReadOnlyCollection<T> collection, Random random) Parameters collection IReadOnlyCollection<T> random Random Returns T Type Parameters T Random<T>(IReadOnlyCollection<T>) Takes one random element from the collection. public static T Random<T>(this IReadOnlyCollection<T> collection) Parameters collection IReadOnlyCollection<T> Returns T Type Parameters T ThrowIfNullOrEmpty<TCollection>(TCollection?, string?) Returns the collection when not null nor empty, or throws complaining thereabout. public static TCollection ThrowIfNullOrEmpty<TCollection>(this TCollection? collection, string? collectionName = null) where TCollection : ICollection Parameters collection TCollection collectionName string Returns TCollection Type Parameters TCollection"
  },
  "api/NetEnhancements.Util.CultureInfoExtensions.html": {
    "href": "api/NetEnhancements.Util.CultureInfoExtensions.html",
    "title": "Class CultureInfoExtensions",
    "keywords": "Class CultureInfoExtensions Namespace NetEnhancements.Util Assembly NetEnhancements.Util.dll Provides extension methods for CultureInfo. public static class CultureInfoExtensions Inheritance object CultureInfoExtensions Fields Dutch The Dutch culture (tulips 'n such). public static readonly CultureInfo Dutch Field Value CultureInfo Methods SetSensibleCultureInfo() Set culture for logging. public static void SetSensibleCultureInfo()"
  },
  "api/NetEnhancements.Util.DateExtensions.html": {
    "href": "api/NetEnhancements.Util.DateExtensions.html",
    "title": "Class DateExtensions",
    "keywords": "Class DateExtensions Namespace NetEnhancements.Util Assembly NetEnhancements.Util.dll Provides extension methods for DateTimeOffset, DateTime, DateOnly and TimeSpan objects. public static class DateExtensions Inheritance object DateExtensions Methods DaysOrWeeksUntil(DateOnly, DateOnly, string, string, string, string) Returns a string representation of the number of days (when less than 7) or number of weeks between the first and last day. public static string DaysOrWeeksUntil(this DateOnly firstDay, DateOnly lastDay, string day = \"day\", string days = \"days\", string week = \"week\", string weeks = \"weeks\") Parameters firstDay DateOnly lastDay DateOnly day string days string week string weeks string Returns string DoDatesOverlap(DateTime, DateTime, DateTime, DateTime) Determines if two date ranges overlap. public static bool DoDatesOverlap(DateTime aStart, DateTime aEnd, DateTime bStart, DateTime bEnd) Parameters aStart DateTime The start DateTime of the first date range. aEnd DateTime The end DateTime of the first date range. bStart DateTime The start DateTime of the second date range. bEnd DateTime The end DateTime of the second date range. Returns bool True if the date ranges overlap; otherwise, false. EachDay(DateTime, DateTime) Generates an enumerable sequence of DateTime objects, one for each day in the specified range. public static IEnumerable<DateTime> EachDay(DateTime from, DateTime thru) Parameters from DateTime The start date of the range, inclusive. thru DateTime The end date of the range, inclusive. Returns IEnumerable<DateTime> An IEnumerable<DateTime> containing one DateTime object for each day in the specified range. EndOfPreviousMonth(DateTime) Gets the end of the previous month for a given DateTime. public static DateTime EndOfPreviousMonth(this DateTime dt) Parameters dt DateTime The DateTime object to get the end of the previous month from. Returns DateTime A new DateTime object representing the end of the previous month. FromUnixTime(in long) Converts a Unix time to a DateTime object. public static DateTime FromUnixTime(in long unixTime) Parameters unixTime long The Unix time to convert, in seconds since the Unix epoch (1970-01-01 00:00:00 UTC). Returns DateTime A DateTime object representing the converted Unix time. GetDayFrequency(DateOnly, DateOnly) Get occurrences per DayOfWeek between from and until. public static Dictionary<DayOfWeek, int> GetDayFrequency(this DateOnly from, DateOnly until) Parameters from DateOnly until DateOnly Returns Dictionary<DayOfWeek, int> GetDayFrequency(DateTime, DateTime) Get occurrences per DayOfWeek between from and until. public static Dictionary<DayOfWeek, int> GetDayFrequency(this DateTime from, DateTime until) Parameters from DateTime until DateTime Returns Dictionary<DayOfWeek, int> GetFirstDayOfMonth(DateTime, DayOfWeek) Gets the first occurrence of a specified day of the week in a given month. public static DateTime GetFirstDayOfMonth(this DateTime date, DayOfWeek firstDayOfWeek) Parameters date DateTime The DateTime object representing the month to find the first occurrence of the day of the week. firstDayOfWeek DayOfWeek The DayOfWeek value to find the first occurrence of in the month. Returns DateTime A new DateTime object representing the first occurrence of the specified day of the week in the given month. Humanize(TimeSpan) Converts a TimeSpan object into a human-readable string representation. public static string Humanize(this TimeSpan ts) Parameters ts TimeSpan The TimeSpan object to humanize. Returns string A string representing the human-readable version of the TimeSpan object. IsBetweenTwoDates(DateTime, DateTime, DateTime) Determines if a DateTime object falls between two specified DateTime objects. public static bool IsBetweenTwoDates(this DateTime dt, DateTime start, DateTime end) Parameters dt DateTime The DateTime object to check. start DateTime The start DateTime object to compare with. end DateTime The end DateTime object to compare with. Returns bool True if the DateTime object is between the start and end dates, inclusive; otherwise, false. RoundToNearest(DateTime, TimeSpan) Rounds a DateTime object to the nearest TimeSpan. public static DateTime RoundToNearest(this DateTime dt, TimeSpan ts) Parameters dt DateTime The DateTime object to round. ts TimeSpan The TimeSpan to round to. Returns DateTime A new DateTime object rounded to the nearest TimeSpan. RoundToNearest(TimeSpan, TimeSpan) Rounds a TimeSpan object to the nearest TimeSpan. public static TimeSpan RoundToNearest(this TimeSpan ts, TimeSpan roundTo) Parameters ts TimeSpan The TimeSpan object to round. roundTo TimeSpan The TimeSpan to round to. Returns TimeSpan A new TimeSpan object rounded to the nearest TimeSpan. StartOfPreviousMonth(DateTime) Gets the start of the previous month for a given DateTime. public static DateTime StartOfPreviousMonth(this DateTime dt) Parameters dt DateTime The DateTime object to get the start of the previous month from. Returns DateTime A new DateTime object representing the start of the previous month. StartOfWeek(DateTime, DayOfWeek) Returns the start date of the week in which the given dateTime falls, provided the week starts at the weekday startOfWeek. public static DateTime StartOfWeek(this DateTime dateTime, DayOfWeek startOfWeek) Parameters dateTime DateTime startOfWeek DayOfWeek Returns DateTime ToReadableString(DateTimeOffset, string, string) Readable date string: \"today, HH:mm:ss\", \"yesterday, HH:mm:ss\", \"Jan 01, HH:mm:ss\", ... public static string ToReadableString(this DateTimeOffset dateTime, string today = \"today\", string yesterday = \"yesterday\") Parameters dateTime DateTimeOffset today string yesterday string Returns string ToReadableString(DateTimeOffset?, string, string) Readable date string: \"today, HH:mm:ss\", \"yesterday, HH:mm:ss\", \"Jan 01, HH:mm:ss\", ... public static string? ToReadableString(this DateTimeOffset? dateTime, string today = \"today\", string yesterday = \"yesterday\") Parameters dateTime DateTimeOffset? today string yesterday string Returns string ToUnixTime(DateTime) Converts a DateTime object to Unix time. public static long ToUnixTime(this DateTime dt) Parameters dt DateTime The DateTime object to convert. Returns long A long value representing the Unix time. WeekNumbersUntil(DateOnly, DateOnly, string, string) Returns a human-readable string representation of the number of calendar weeks between the first and last day. Examples: \"Week 15 2023\", \"Week 1 until 5 2023\", \"Week 52 2022 until 5 2023\". public static string WeekNumbersUntil(this DateOnly firstDay, DateOnly lastDay, string week = \"Week\", string until = \"until\") Parameters firstDay DateOnly lastDay DateOnly week string until string Returns string"
  },
  "api/NetEnhancements.Util.EnumExtensions.html": {
    "href": "api/NetEnhancements.Util.EnumExtensions.html",
    "title": "Class EnumExtensions",
    "keywords": "Class EnumExtensions Namespace NetEnhancements.Util Assembly NetEnhancements.Util.dll Provides extension methods for enums. public static class EnumExtensions Inheritance object EnumExtensions Methods GetDisplayName(Enum) Read the Name property from an enum member. When the member can't be found by name, or when none of the attributes is found, the passed enum member's ToString() will be returned. public static string GetDisplayName(this Enum enumMember) Parameters enumMember Enum Returns string Examples enum Foo { [Display(Name = \"Foo-1\")] Foo1 } // will contain \"Foo-1\". var foo1Name = Foo.Foo1.GetDisplayName();"
  },
  "api/NetEnhancements.Util.ExpressionExtensions.html": {
    "href": "api/NetEnhancements.Util.ExpressionExtensions.html",
    "title": "Class ExpressionExtensions",
    "keywords": "Class ExpressionExtensions Namespace NetEnhancements.Util Assembly NetEnhancements.Util.dll Provides extension methods for expressions. public static class ExpressionExtensions Inheritance object ExpressionExtensions Methods GetMemberName(Expression) Returns the member name the expression points to. public static string GetMemberName(this Expression expression) Parameters expression Expression Returns string Exceptions ArgumentException When the expression doesn't point to a member. GetMemberValue<T, TValue>(T, Expression<Func<T, TValue>>) Returns the value of the member the propertySelector points to, or throws when that doesn't. public static (string MemberName, TValue? Value) GetMemberValue<T, TValue>(T instance, Expression<Func<T, TValue>> propertySelector) where T : class Parameters instance T propertySelector Expression<Func<T, TValue>> Returns (string MemberName, TValue Value) Type Parameters T TValue Exceptions ArgumentException When the propertySelector doesn't point to a callable member."
  },
  "api/NetEnhancements.Util.html": {
    "href": "api/NetEnhancements.Util.html",
    "title": "Namespace NetEnhancements.Util",
    "keywords": "Namespace NetEnhancements.Util The Util namespace contains extension methods for value types 'n such. Classes AttributeValidator Wraps TryValidateObject(object, ValidationContext, ICollection<ValidationResult>, bool) into an easier-to-use method. CollectionExtensions Provides extension methods for collections. CultureInfoExtensions Provides extension methods for CultureInfo. DateExtensions Provides extension methods for DateTimeOffset, DateTime, DateOnly and TimeSpan objects. EnumExtensions Provides extension methods for enums. ExpressionExtensions Provides extension methods for expressions. NumericExtensions Provides extension methods for numeric types. RandomExtensions Provides extension methods for Random. StreamExtensions Provides extension methods for Streams. StringExtensions Provides extension methods for strings. VatNumberValidator Validator for VAT numbers."
  },
  "api/NetEnhancements.Util.Json.DateOnlyConverter.html": {
    "href": "api/NetEnhancements.Util.Json.DateOnlyConverter.html",
    "title": "Class DateOnlyConverter",
    "keywords": "Class DateOnlyConverter Namespace NetEnhancements.Util.Json Assembly NetEnhancements.Util.dll A converter for DateOnly with custom format support. public class DateOnlyConverter : ParsingConverter<DateOnly> Inheritance object JsonConverter JsonConverter<DateOnly> ParsingConverter<DateOnly> DateOnlyConverter Inherited Members ParsingConverter<DateOnly>.SerializationFormats ParsingConverter<DateOnly>.Write(Utf8JsonWriter, DateOnly, JsonSerializerOptions) ParsingConverter<DateOnly>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) ParsingConverter<DateOnly>.ThrowUnparsable(string) JsonConverter<DateOnly>.CanConvert(Type) JsonConverter<DateOnly>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<DateOnly>.WriteAsPropertyName(Utf8JsonWriter, DateOnly, JsonSerializerOptions) JsonConverter<DateOnly>.HandleNull Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Examples builder.Services.AddMvc() .AddJsonOptions(options => { // Custom DateOnly formats. options.JsonSerializerOptions.Converters.Add(new DateOnlyConverter(\"yyyy-MM-dd\", \"dd-MM-yyyy\", \"yyyy-MM-dd'T'HH:mm:ss.fffK\")); // \"\" == null for numbers. options.JsonSerializerOptions.Converters.Add(new EmptyStringToNullNumberConverterFactory()); }); Constructors DateOnlyConverter(string, params string[]) public DateOnlyConverter(string defaultFormat = \"yyyy-MM-dd\", params string[] serializationFormats) Parameters defaultFormat string serializationFormats string[] Methods FromStringValue(string) Parse a value into a T. protected override DateOnly FromStringValue(string value) Parameters value string Returns DateOnly ToStringValue(DateOnly) Return a string representation of a T. Should take the first format from the SerializationFormats collection. protected override string ToStringValue(DateOnly value) Parameters value DateOnly Returns string"
  },
  "api/NetEnhancements.Util.Json.EmptyStringToNullNumberConverter-1.html": {
    "href": "api/NetEnhancements.Util.Json.EmptyStringToNullNumberConverter-1.html",
    "title": "Class EmptyStringToNullNumberConverter<TNumber>",
    "keywords": "Class EmptyStringToNullNumberConverter<TNumber> Namespace NetEnhancements.Util.Json Assembly NetEnhancements.Util.dll Converts a given number type from empty strings to null, when the JsonSerializerOptions.NumberHandling contains AllowReadingFromString. Have this class factory-created by registering EmptyStringToNullNumberConverterFactory. public class EmptyStringToNullNumberConverter<TNumber> : JsonConverter<TNumber?> where TNumber : struct, INumber<TNumber> Type Parameters TNumber Inheritance object JsonConverter JsonConverter<TNumber?> EmptyStringToNullNumberConverter<TNumber> Inherited Members JsonConverter<TNumber?>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<TNumber?>.WriteAsPropertyName(Utf8JsonWriter, TNumber?, JsonSerializerOptions) JsonConverter<TNumber?>.HandleNull Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Methods CanConvert(Type) public override bool CanConvert(Type typeToConvert) Parameters typeToConvert Type Returns bool Read(ref Utf8JsonReader, Type, JsonSerializerOptions) public override TNumber? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader typeToConvert Type options JsonSerializerOptions Returns TNumber? Write(Utf8JsonWriter, TNumber?, JsonSerializerOptions) public override void Write(Utf8JsonWriter writer, TNumber? value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter value TNumber? options JsonSerializerOptions"
  },
  "api/NetEnhancements.Util.Json.EmptyStringToNullNumberConverterFactory.html": {
    "href": "api/NetEnhancements.Util.Json.EmptyStringToNullNumberConverterFactory.html",
    "title": "Class EmptyStringToNullNumberConverterFactory",
    "keywords": "Class EmptyStringToNullNumberConverterFactory Namespace NetEnhancements.Util.Json Assembly NetEnhancements.Util.dll Register this factory to let all nullable numeric types be conversible from empty string to null, when the JsonSerializerOptions.NumberHandling contains AllowReadingFromString. public class EmptyStringToNullNumberConverterFactory : JsonConverterFactory Inheritance object JsonConverter JsonConverterFactory EmptyStringToNullNumberConverterFactory Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Examples builder.Services.AddMvc() .AddJsonOptions(options => { // \"\" == null for numbers. options.JsonSerializerOptions.Converters.Add(new EmptyStringToNullNumberConverterFactory()); }); Methods CanConvert(Type) We can convert from and to nullable numeric types. Gets called once per type per application run, no need for caching. public override bool CanConvert(Type typeToConvert) Parameters typeToConvert Type Returns bool CreateConverter(Type, JsonSerializerOptions) Gets called once per type per application run, no need for caching. public override JsonConverter CreateConverter(Type type, JsonSerializerOptions options) Parameters type Type options JsonSerializerOptions Returns JsonConverter"
  },
  "api/NetEnhancements.Util.Json.html": {
    "href": "api/NetEnhancements.Util.Json.html",
    "title": "Namespace NetEnhancements.Util.Json",
    "keywords": "Namespace NetEnhancements.Util.Json Classes DateOnlyConverter A converter for DateOnly with custom format support. EmptyStringToNullNumberConverter<TNumber> Converts a given number type from empty strings to null, when the JsonSerializerOptions.NumberHandling contains AllowReadingFromString. Have this class factory-created by registering EmptyStringToNullNumberConverterFactory. EmptyStringToNullNumberConverterFactory Register this factory to let all nullable numeric types be conversible from empty string to null, when the JsonSerializerOptions.NumberHandling contains AllowReadingFromString. ParsingConverter<T> Converts value types to and from JSON by parsing them in the formats specified in the constructor. TimeOnlyConverter A converter for TimeOnly with custom format support."
  },
  "api/NetEnhancements.Util.Json.ParsingConverter-1.html": {
    "href": "api/NetEnhancements.Util.Json.ParsingConverter-1.html",
    "title": "Class ParsingConverter<T>",
    "keywords": "Class ParsingConverter<T> Namespace NetEnhancements.Util.Json Assembly NetEnhancements.Util.dll Converts value types to and from JSON by parsing them in the formats specified in the constructor. public abstract class ParsingConverter<T> : JsonConverter<T> Type Parameters T Inheritance object JsonConverter JsonConverter<T> ParsingConverter<T> Derived DateOnlyConverter TimeOnlyConverter Inherited Members JsonConverter<T>.CanConvert(Type) JsonConverter<T>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<T>.WriteAsPropertyName(Utf8JsonWriter, T, JsonSerializerOptions) JsonConverter<T>.HandleNull Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Constructors ParsingConverter(string, params string[]) protected ParsingConverter(string defaultFormat, params string[] serializationFormats) Parameters defaultFormat string serializationFormats string[] Fields SerializationFormats Contains the registered serialization formats, to parse from and serialize into. protected readonly string[] SerializationFormats Field Value string[] Methods FromStringValue(string) Parse a value into a T. protected abstract T FromStringValue(string value) Parameters value string Returns T Read(ref Utf8JsonReader, Type, JsonSerializerOptions) public override sealed T Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader typeToConvert Type options JsonSerializerOptions Returns T ThrowUnparsable(string) Throws a JsonException indicating the value could not be parsed. protected void ThrowUnparsable(string value) Parameters value string ToStringValue(T) Return a string representation of a T. Should take the first format from the SerializationFormats collection. protected abstract string ToStringValue(T value) Parameters value T Returns string Write(Utf8JsonWriter, T, JsonSerializerOptions) public override sealed void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter value T options JsonSerializerOptions"
  },
  "api/NetEnhancements.Util.Json.TimeOnlyConverter.html": {
    "href": "api/NetEnhancements.Util.Json.TimeOnlyConverter.html",
    "title": "Class TimeOnlyConverter",
    "keywords": "Class TimeOnlyConverter Namespace NetEnhancements.Util.Json Assembly NetEnhancements.Util.dll A converter for TimeOnly with custom format support. public class TimeOnlyConverter : ParsingConverter<TimeOnly> Inheritance object JsonConverter JsonConverter<TimeOnly> ParsingConverter<TimeOnly> TimeOnlyConverter Inherited Members ParsingConverter<TimeOnly>.SerializationFormats ParsingConverter<TimeOnly>.Write(Utf8JsonWriter, TimeOnly, JsonSerializerOptions) ParsingConverter<TimeOnly>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) ParsingConverter<TimeOnly>.ThrowUnparsable(string) JsonConverter<TimeOnly>.CanConvert(Type) JsonConverter<TimeOnly>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<TimeOnly>.WriteAsPropertyName(Utf8JsonWriter, TimeOnly, JsonSerializerOptions) JsonConverter<TimeOnly>.HandleNull Extension Methods CollectionExtensions.In<T>(T?, params T[]) CollectionExtensions.In<T>(T?, IEnumerable<T>) Examples builder.Services.AddMvc() .AddJsonOptions(options => { // Custom TimeOnly formats. options.JsonSerializerOptions.Converters.Add(new TimeOnlyConverter(\"HH:mm\", \"HHmm\", \"HH:mm:ss.fff\")); }); Constructors TimeOnlyConverter(string, params string[]) public TimeOnlyConverter(string defaultFormat = \"HH:mm:ss.fff\", params string[] serializationFormats) Parameters defaultFormat string serializationFormats string[] Methods FromStringValue(string) Parse a value into a T. protected override TimeOnly FromStringValue(string value) Parameters value string Returns TimeOnly ToStringValue(TimeOnly) Return a string representation of a T. Should take the first format from the SerializationFormats collection. protected override string ToStringValue(TimeOnly value) Parameters value TimeOnly Returns string"
  },
  "api/NetEnhancements.Util.NumericExtensions.html": {
    "href": "api/NetEnhancements.Util.NumericExtensions.html",
    "title": "Class NumericExtensions",
    "keywords": "Class NumericExtensions Namespace NetEnhancements.Util Assembly NetEnhancements.Util.dll Provides extension methods for numeric types. public static class NumericExtensions Inheritance object NumericExtensions Methods HasDecimals(decimal) Returns true when the decimal has decimals after the dot. public static bool HasDecimals(this decimal value) Parameters value decimal Returns bool ToPriceString(decimal, int, IFormatProvider?) TODO: which currency is this anyway? public static string ToPriceString(this decimal value, int decimals = 2, IFormatProvider? cultureInfo = null) Parameters value decimal decimals int cultureInfo IFormatProvider Returns string ToPriceString(decimal?, int, IFormatProvider?) TODO: which currency is this anyway? public static string ToPriceString(this decimal? value, int decimals = 2, IFormatProvider? cultureInfo = null) Parameters value decimal? decimals int cultureInfo IFormatProvider Returns string ToValueString(decimal) Returns a string representing the given value, with at least 2 decimals when not zero (otherwise returns \"0\"), more if specified in the value. public static string ToValueString(this decimal value) Parameters value decimal Returns string ToValueString(decimal?) Returns a string representing the given value, with at least 2 decimals when not zero or null (otherwise returns \"0\"), more if specified in the value. public static string ToValueString(this decimal? value) Parameters value decimal? Returns string"
  },
  "api/NetEnhancements.Util.RandomExtensions.html": {
    "href": "api/NetEnhancements.Util.RandomExtensions.html",
    "title": "Class RandomExtensions",
    "keywords": "Class RandomExtensions Namespace NetEnhancements.Util Assembly NetEnhancements.Util.dll Provides extension methods for Random. public static class RandomExtensions Inheritance object RandomExtensions Methods GenerateRandomToken(int) Generate a hexadecimal token string with the given length, which must be a multiple of 2. public static string GenerateRandomToken(int length) Parameters length int Returns string"
  },
  "api/NetEnhancements.Util.StreamExtensions.html": {
    "href": "api/NetEnhancements.Util.StreamExtensions.html",
    "title": "Class StreamExtensions",
    "keywords": "Class StreamExtensions Namespace NetEnhancements.Util Assembly NetEnhancements.Util.dll Provides extension methods for Streams. public static class StreamExtensions Inheritance object StreamExtensions Methods ReadFully(Stream, bool) Read a stream entirely, optionally not disposing it. public static byte[] ReadFully(this Stream stream, bool dispose = true) Parameters stream Stream dispose bool Returns byte[] ReadFullyAsync(Stream, bool, CancellationToken) Read a stream entirely, optionally not disposing it. public static Task<byte[]> ReadFullyAsync(this Stream stream, bool dispose = true, CancellationToken cancellationToken = default) Parameters stream Stream dispose bool cancellationToken CancellationToken Returns Task<byte[]>"
  },
  "api/NetEnhancements.Util.StringExtensions.html": {
    "href": "api/NetEnhancements.Util.StringExtensions.html",
    "title": "Class StringExtensions",
    "keywords": "Class StringExtensions Namespace NetEnhancements.Util Assembly NetEnhancements.Util.dll Provides extension methods for strings. public static class StringExtensions Inheritance object StringExtensions Methods FromHexString(string) Given a hexadecimal string, returns the UTF-16 string the bytes therein represent. public static string FromHexString(this string input) Parameters input string Returns string IsDevelopmentOrDocker(string) Returns true for strings like \"Development\", \"Docker\", \"Development.Docker\", but not for \"Docker.Production\". public static bool IsDevelopmentOrDocker(this string environmentName) Parameters environmentName string Returns bool RemoveEnd(string, string, StringComparison) Removes the given suffix if the input ends with that string. public static string RemoveEnd(this string input, string suffix, StringComparison comparisonType = StringComparison.InvariantCulture) Parameters input string suffix string comparisonType StringComparison Returns string ToBytes(string) Given a hexadecimal string, returns the bytes that string represents. public static byte[] ToBytes(this string input) Parameters input string Returns byte[] ToHexString(byte[]) Returns the hexadecimal representation of the input bytes. public static string ToHexString(this byte[] bytes) Parameters bytes byte[] Returns string ToHexString(string) Returns the hexadecimal representation of the input string in UTF-16 bytes. public static string ToHexString(this string input) Parameters input string Returns string ToSnakeCase(string) to_snake_case public static string ToSnakeCase(this string str) Parameters str string Returns string Truncate(string?, int) Returns the original string, or truncates it to maxLength if it's longer than that. public static string? Truncate(this string? s, int maxLength) Parameters s string maxLength int Returns string Exceptions ArgumentOutOfRangeException When the length is less than 0."
  },
  "api/NetEnhancements.Util.VatNumberValidator.html": {
    "href": "api/NetEnhancements.Util.VatNumberValidator.html",
    "title": "Class VatNumberValidator",
    "keywords": "Class VatNumberValidator Namespace NetEnhancements.Util Assembly NetEnhancements.Util.dll Validator for VAT numbers. public static class VatNumberValidator Inheritance object VatNumberValidator Methods Validate(string?, string?, bool, bool) Validate a VAT number. public static ValidationResult? Validate(string? vatNumber, string? countryCode, bool allowSeparatorChars, bool allowEmpty) Parameters vatNumber string countryCode string allowSeparatorChars bool allowEmpty bool Returns ValidationResult"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": ".NET Enhancements",
    "keywords": ".NET Enhancements Util Extension methods for dates, strings, collections, enums... Shared Shared concepts between web, console, daemon application, such as configuration and logging. AspNet Conventions for routing, security, validation. EntityFramework DateOnly/TimeOnly, entities with GUID PKs, Created/Modified properties, ... Identity A ready-to-use ASP.NET Core Identity setup. Imaging Resizing images. Imaging.EntityFramework Saving image metadata in a database. Services Background services, especially: ScheduledBackgroundService, that allows a (de facto) singleton service to do its timed work in a scoped manner. Business Combining the above in easy-to-use application parts."
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE.",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}